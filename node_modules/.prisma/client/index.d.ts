
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    gptResponses: GptResponsePayload<ExtArgs>[]
    contactFormMessages: ContactFormMessagePayload<ExtArgs>[]
    tasks: TaskPayload<ExtArgs>[]
    files: FilePayload<ExtArgs>[]
    auth: AuthPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string | null
    username: string | null
    createdAt: Date
    lastActiveTimestamp: Date
    isAdmin: boolean
    stripeId: string | null
    checkoutSessionId: string | null
    subscriptionTier: string | null
    subscriptionStatus: string | null
    sendEmail: boolean
    datePaid: Date | null
    credits: number
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type GptResponsePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "GptResponse"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    content: string
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["gptResponse"]>
  composites: {}
}

/**
 * Model GptResponse
 * 
 */
export type GptResponse = runtime.Types.DefaultSelection<GptResponsePayload>
export type TaskPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Task"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    description: string
    time: string
    isDone: boolean
    userId: number
    createdAt: Date
  }, ExtArgs["result"]["task"]>
  composites: {}
}

/**
 * Model Task
 * 
 */
export type Task = runtime.Types.DefaultSelection<TaskPayload>
export type FilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "File"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    type: string
    key: string
    uploadUrl: string
    userId: number
    createdAt: Date
  }, ExtArgs["result"]["file"]>
  composites: {}
}

/**
 * Model File
 * 
 */
export type File = runtime.Types.DefaultSelection<FilePayload>
export type ContactFormMessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ContactFormMessage"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    content: string
    userId: number
    createdAt: Date
    isRead: boolean
    repliedAt: Date | null
  }, ExtArgs["result"]["contactFormMessage"]>
  composites: {}
}

/**
 * Model ContactFormMessage
 * 
 */
export type ContactFormMessage = runtime.Types.DefaultSelection<ContactFormMessagePayload>
export type DailyStatsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "DailyStats"
  objects: {
    sources: PageViewSourcePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    date: Date
    totalViews: number
    prevDayViewsChangePercent: string
    userCount: number
    paidUserCount: number
    userDelta: number
    paidUserDelta: number
    totalRevenue: number
    totalProfit: number
  }, ExtArgs["result"]["dailyStats"]>
  composites: {}
}

/**
 * Model DailyStats
 * 
 */
export type DailyStats = runtime.Types.DefaultSelection<DailyStatsPayload>
export type PageViewSourcePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PageViewSource"
  objects: {
    dailyStats: DailyStatsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    date: Date
    name: string
    visitors: number
    dailyStatsId: number | null
  }, ExtArgs["result"]["pageViewSource"]>
  composites: {}
}

/**
 * Model PageViewSource
 * 
 */
export type PageViewSource = runtime.Types.DefaultSelection<PageViewSourcePayload>
export type LogsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Logs"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    message: string
    level: string
  }, ExtArgs["result"]["logs"]>
  composites: {}
}

/**
 * Model Logs
 * 
 */
export type Logs = runtime.Types.DefaultSelection<LogsPayload>
export type AuthPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Auth"
  objects: {
    user: UserPayload<ExtArgs> | null
    identities: AuthIdentityPayload<ExtArgs>[]
    sessions: SessionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: number | null
  }, ExtArgs["result"]["auth"]>
  composites: {}
}

/**
 * Model Auth
 * 
 */
export type Auth = runtime.Types.DefaultSelection<AuthPayload>
export type AuthIdentityPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AuthIdentity"
  objects: {
    auth: AuthPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    providerName: string
    providerUserId: string
    providerData: string
    authId: string
  }, ExtArgs["result"]["authIdentity"]>
  composites: {}
}

/**
 * Model AuthIdentity
 * 
 */
export type AuthIdentity = runtime.Types.DefaultSelection<AuthIdentityPayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {
    auth: AuthPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    expiresAt: Date
    userId: string
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.gptResponse`: Exposes CRUD operations for the **GptResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GptResponses
    * const gptResponses = await prisma.gptResponse.findMany()
    * ```
    */
  get gptResponse(): Prisma.GptResponseDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.contactFormMessage`: Exposes CRUD operations for the **ContactFormMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactFormMessages
    * const contactFormMessages = await prisma.contactFormMessage.findMany()
    * ```
    */
  get contactFormMessage(): Prisma.ContactFormMessageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.dailyStats`: Exposes CRUD operations for the **DailyStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyStats
    * const dailyStats = await prisma.dailyStats.findMany()
    * ```
    */
  get dailyStats(): Prisma.DailyStatsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.pageViewSource`: Exposes CRUD operations for the **PageViewSource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageViewSources
    * const pageViewSources = await prisma.pageViewSource.findMany()
    * ```
    */
  get pageViewSource(): Prisma.PageViewSourceDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.logs`: Exposes CRUD operations for the **Logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.logs.findMany()
    * ```
    */
  get logs(): Prisma.LogsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.auth`: Exposes CRUD operations for the **Auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auths
    * const auths = await prisma.auth.findMany()
    * ```
    */
  get auth(): Prisma.AuthDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.authIdentity`: Exposes CRUD operations for the **AuthIdentity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthIdentities
    * const authIdentities = await prisma.authIdentity.findMany()
    * ```
    */
  get authIdentity(): Prisma.AuthIdentityDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    GptResponse: 'GptResponse',
    Task: 'Task',
    File: 'File',
    ContactFormMessage: 'ContactFormMessage',
    DailyStats: 'DailyStats',
    PageViewSource: 'PageViewSource',
    Logs: 'Logs',
    Auth: 'Auth',
    AuthIdentity: 'AuthIdentity',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'gptResponse' | 'task' | 'file' | 'contactFormMessage' | 'dailyStats' | 'pageViewSource' | 'logs' | 'auth' | 'authIdentity' | 'session'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GptResponse: {
        payload: GptResponsePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.GptResponseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GptResponseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>
          }
          findFirst: {
            args: Prisma.GptResponseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GptResponseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>
          }
          findMany: {
            args: Prisma.GptResponseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>[]
          }
          create: {
            args: Prisma.GptResponseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>
          }
          createMany: {
            args: Prisma.GptResponseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GptResponseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>
          }
          update: {
            args: Prisma.GptResponseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>
          }
          deleteMany: {
            args: Prisma.GptResponseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GptResponseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GptResponseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GptResponsePayload>
          }
          aggregate: {
            args: Prisma.GptResponseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGptResponse>
          }
          groupBy: {
            args: Prisma.GptResponseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GptResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.GptResponseCountArgs<ExtArgs>,
            result: $Utils.Optional<GptResponseCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: TaskPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>,
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: FilePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>,
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      ContactFormMessage: {
        payload: ContactFormMessagePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ContactFormMessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFormMessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>
          }
          findFirst: {
            args: Prisma.ContactFormMessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFormMessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>
          }
          findMany: {
            args: Prisma.ContactFormMessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>[]
          }
          create: {
            args: Prisma.ContactFormMessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>
          }
          createMany: {
            args: Prisma.ContactFormMessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContactFormMessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>
          }
          update: {
            args: Prisma.ContactFormMessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>
          }
          deleteMany: {
            args: Prisma.ContactFormMessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactFormMessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactFormMessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactFormMessagePayload>
          }
          aggregate: {
            args: Prisma.ContactFormMessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContactFormMessage>
          }
          groupBy: {
            args: Prisma.ContactFormMessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactFormMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactFormMessageCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactFormMessageCountAggregateOutputType> | number
          }
        }
      }
      DailyStats: {
        payload: DailyStatsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DailyStatsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyStatsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          findFirst: {
            args: Prisma.DailyStatsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyStatsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          findMany: {
            args: Prisma.DailyStatsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>[]
          }
          create: {
            args: Prisma.DailyStatsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          createMany: {
            args: Prisma.DailyStatsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DailyStatsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          update: {
            args: Prisma.DailyStatsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          deleteMany: {
            args: Prisma.DailyStatsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DailyStatsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DailyStatsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DailyStatsPayload>
          }
          aggregate: {
            args: Prisma.DailyStatsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDailyStats>
          }
          groupBy: {
            args: Prisma.DailyStatsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DailyStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyStatsCountArgs<ExtArgs>,
            result: $Utils.Optional<DailyStatsCountAggregateOutputType> | number
          }
        }
      }
      PageViewSource: {
        payload: PageViewSourcePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PageViewSourceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageViewSourceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>
          }
          findFirst: {
            args: Prisma.PageViewSourceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageViewSourceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>
          }
          findMany: {
            args: Prisma.PageViewSourceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>[]
          }
          create: {
            args: Prisma.PageViewSourceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>
          }
          createMany: {
            args: Prisma.PageViewSourceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PageViewSourceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>
          }
          update: {
            args: Prisma.PageViewSourceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>
          }
          deleteMany: {
            args: Prisma.PageViewSourceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PageViewSourceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PageViewSourceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PageViewSourcePayload>
          }
          aggregate: {
            args: Prisma.PageViewSourceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePageViewSource>
          }
          groupBy: {
            args: Prisma.PageViewSourceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PageViewSourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageViewSourceCountArgs<ExtArgs>,
            result: $Utils.Optional<PageViewSourceCountAggregateOutputType> | number
          }
        }
      }
      Logs: {
        payload: LogsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.LogsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>
          }
          findFirst: {
            args: Prisma.LogsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>
          }
          findMany: {
            args: Prisma.LogsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>[]
          }
          create: {
            args: Prisma.LogsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>
          }
          createMany: {
            args: Prisma.LogsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LogsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>
          }
          update: {
            args: Prisma.LogsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>
          }
          deleteMany: {
            args: Prisma.LogsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LogsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LogsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogsPayload>
          }
          aggregate: {
            args: Prisma.LogsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLogs>
          }
          groupBy: {
            args: Prisma.LogsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogsCountArgs<ExtArgs>,
            result: $Utils.Optional<LogsCountAggregateOutputType> | number
          }
        }
      }
      Auth: {
        payload: AuthPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AuthFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>
          }
          findFirst: {
            args: Prisma.AuthFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>
          }
          findMany: {
            args: Prisma.AuthFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>[]
          }
          create: {
            args: Prisma.AuthCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>
          }
          createMany: {
            args: Prisma.AuthCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuthDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>
          }
          update: {
            args: Prisma.AuthUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>
          }
          deleteMany: {
            args: Prisma.AuthDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuthUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuthUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthPayload>
          }
          aggregate: {
            args: Prisma.AuthAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuth>
          }
          groupBy: {
            args: Prisma.AuthGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthCountAggregateOutputType> | number
          }
        }
      }
      AuthIdentity: {
        payload: AuthIdentityPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AuthIdentityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthIdentityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>
          }
          findFirst: {
            args: Prisma.AuthIdentityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthIdentityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>
          }
          findMany: {
            args: Prisma.AuthIdentityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>[]
          }
          create: {
            args: Prisma.AuthIdentityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>
          }
          createMany: {
            args: Prisma.AuthIdentityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuthIdentityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>
          }
          update: {
            args: Prisma.AuthIdentityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>
          }
          deleteMany: {
            args: Prisma.AuthIdentityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuthIdentityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuthIdentityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuthIdentityPayload>
          }
          aggregate: {
            args: Prisma.AuthIdentityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthIdentity>
          }
          groupBy: {
            args: Prisma.AuthIdentityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthIdentityGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthIdentityCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthIdentityCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    gptResponses: number
    contactFormMessages: number
    tasks: number
    files: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    gptResponses?: boolean | UserCountOutputTypeCountGptResponsesArgs
    contactFormMessages?: boolean | UserCountOutputTypeCountContactFormMessagesArgs
    tasks?: boolean | UserCountOutputTypeCountTasksArgs
    files?: boolean | UserCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGptResponsesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GptResponseWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactFormMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContactFormMessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }



  /**
   * Count Type DailyStatsCountOutputType
   */


  export type DailyStatsCountOutputType = {
    sources: number
  }

  export type DailyStatsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sources?: boolean | DailyStatsCountOutputTypeCountSourcesArgs
  }

  // Custom InputTypes

  /**
   * DailyStatsCountOutputType without action
   */
  export type DailyStatsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStatsCountOutputType
     */
    select?: DailyStatsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DailyStatsCountOutputType without action
   */
  export type DailyStatsCountOutputTypeCountSourcesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PageViewSourceWhereInput
  }



  /**
   * Count Type AuthCountOutputType
   */


  export type AuthCountOutputType = {
    identities: number
    sessions: number
  }

  export type AuthCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    identities?: boolean | AuthCountOutputTypeCountIdentitiesArgs
    sessions?: boolean | AuthCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes

  /**
   * AuthCountOutputType without action
   */
  export type AuthCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthCountOutputType
     */
    select?: AuthCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuthCountOutputType without action
   */
  export type AuthCountOutputTypeCountIdentitiesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthIdentityWhereInput
  }


  /**
   * AuthCountOutputType without action
   */
  export type AuthCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    credits: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    credits: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    createdAt: Date | null
    lastActiveTimestamp: Date | null
    isAdmin: boolean | null
    stripeId: string | null
    checkoutSessionId: string | null
    subscriptionTier: string | null
    subscriptionStatus: string | null
    sendEmail: boolean | null
    datePaid: Date | null
    credits: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    createdAt: Date | null
    lastActiveTimestamp: Date | null
    isAdmin: boolean | null
    stripeId: string | null
    checkoutSessionId: string | null
    subscriptionTier: string | null
    subscriptionStatus: string | null
    sendEmail: boolean | null
    datePaid: Date | null
    credits: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    createdAt: number
    lastActiveTimestamp: number
    isAdmin: number
    stripeId: number
    checkoutSessionId: number
    subscriptionTier: number
    subscriptionStatus: number
    sendEmail: number
    datePaid: number
    credits: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    credits?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    credits?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    createdAt?: true
    lastActiveTimestamp?: true
    isAdmin?: true
    stripeId?: true
    checkoutSessionId?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    sendEmail?: true
    datePaid?: true
    credits?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    createdAt?: true
    lastActiveTimestamp?: true
    isAdmin?: true
    stripeId?: true
    checkoutSessionId?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    sendEmail?: true
    datePaid?: true
    credits?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    createdAt?: true
    lastActiveTimestamp?: true
    isAdmin?: true
    stripeId?: true
    checkoutSessionId?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    sendEmail?: true
    datePaid?: true
    credits?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string | null
    username: string | null
    createdAt: Date
    lastActiveTimestamp: Date
    isAdmin: boolean
    stripeId: string | null
    checkoutSessionId: string | null
    subscriptionTier: string | null
    subscriptionStatus: string | null
    sendEmail: boolean
    datePaid: Date | null
    credits: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    createdAt?: boolean
    lastActiveTimestamp?: boolean
    isAdmin?: boolean
    stripeId?: boolean
    checkoutSessionId?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    sendEmail?: boolean
    datePaid?: boolean
    credits?: boolean
    gptResponses?: boolean | User$gptResponsesArgs<ExtArgs>
    contactFormMessages?: boolean | User$contactFormMessagesArgs<ExtArgs>
    tasks?: boolean | User$tasksArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    auth?: boolean | AuthArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    createdAt?: boolean
    lastActiveTimestamp?: boolean
    isAdmin?: boolean
    stripeId?: boolean
    checkoutSessionId?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    sendEmail?: boolean
    datePaid?: boolean
    credits?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    gptResponses?: boolean | User$gptResponsesArgs<ExtArgs>
    contactFormMessages?: boolean | User$contactFormMessagesArgs<ExtArgs>
    tasks?: boolean | User$tasksArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    auth?: boolean | AuthArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    gptResponses<T extends User$gptResponsesArgs<ExtArgs> = {}>(args?: Subset<T, User$gptResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findMany', never>| Null>;

    contactFormMessages<T extends User$contactFormMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$contactFormMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    tasks<T extends User$tasksArgs<ExtArgs> = {}>(args?: Subset<T, User$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findMany', never>| Null>;

    files<T extends User$filesArgs<ExtArgs> = {}>(args?: Subset<T, User$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FilePayload<ExtArgs>, T, 'findMany', never>| Null>;

    auth<T extends AuthArgs<ExtArgs> = {}>(args?: Subset<T, AuthArgs<ExtArgs>>): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.gptResponses
   */
  export type User$gptResponsesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    where?: GptResponseWhereInput
    orderBy?: Enumerable<GptResponseOrderByWithRelationInput>
    cursor?: GptResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GptResponseScalarFieldEnum>
  }


  /**
   * User.contactFormMessages
   */
  export type User$contactFormMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    where?: ContactFormMessageWhereInput
    orderBy?: Enumerable<ContactFormMessageOrderByWithRelationInput>
    cursor?: ContactFormMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContactFormMessageScalarFieldEnum>
  }


  /**
   * User.tasks
   */
  export type User$tasksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * User.files
   */
  export type User$filesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model GptResponse
   */


  export type AggregateGptResponse = {
    _count: GptResponseCountAggregateOutputType | null
    _avg: GptResponseAvgAggregateOutputType | null
    _sum: GptResponseSumAggregateOutputType | null
    _min: GptResponseMinAggregateOutputType | null
    _max: GptResponseMaxAggregateOutputType | null
  }

  export type GptResponseAvgAggregateOutputType = {
    userId: number | null
  }

  export type GptResponseSumAggregateOutputType = {
    userId: number | null
  }

  export type GptResponseMinAggregateOutputType = {
    id: string | null
    content: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GptResponseMaxAggregateOutputType = {
    id: string | null
    content: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GptResponseCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GptResponseAvgAggregateInputType = {
    userId?: true
  }

  export type GptResponseSumAggregateInputType = {
    userId?: true
  }

  export type GptResponseMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GptResponseMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GptResponseCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GptResponseAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GptResponse to aggregate.
     */
    where?: GptResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GptResponses to fetch.
     */
    orderBy?: Enumerable<GptResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GptResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GptResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GptResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GptResponses
    **/
    _count?: true | GptResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GptResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GptResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GptResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GptResponseMaxAggregateInputType
  }

  export type GetGptResponseAggregateType<T extends GptResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateGptResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGptResponse[P]>
      : GetScalarType<T[P], AggregateGptResponse[P]>
  }




  export type GptResponseGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GptResponseWhereInput
    orderBy?: Enumerable<GptResponseOrderByWithAggregationInput>
    by: GptResponseScalarFieldEnum[]
    having?: GptResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GptResponseCountAggregateInputType | true
    _avg?: GptResponseAvgAggregateInputType
    _sum?: GptResponseSumAggregateInputType
    _min?: GptResponseMinAggregateInputType
    _max?: GptResponseMaxAggregateInputType
  }


  export type GptResponseGroupByOutputType = {
    id: string
    content: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: GptResponseCountAggregateOutputType | null
    _avg: GptResponseAvgAggregateOutputType | null
    _sum: GptResponseSumAggregateOutputType | null
    _min: GptResponseMinAggregateOutputType | null
    _max: GptResponseMaxAggregateOutputType | null
  }

  type GetGptResponseGroupByPayload<T extends GptResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GptResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GptResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GptResponseGroupByOutputType[P]>
            : GetScalarType<T[P], GptResponseGroupByOutputType[P]>
        }
      >
    >


  export type GptResponseSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["gptResponse"]>

  export type GptResponseSelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GptResponseInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type GptResponseGetPayload<S extends boolean | null | undefined | GptResponseArgs> = $Types.GetResult<GptResponsePayload, S>

  type GptResponseCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GptResponseFindManyArgs, 'select' | 'include'> & {
      select?: GptResponseCountAggregateInputType | true
    }

  export interface GptResponseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GptResponse'], meta: { name: 'GptResponse' } }
    /**
     * Find zero or one GptResponse that matches the filter.
     * @param {GptResponseFindUniqueArgs} args - Arguments to find a GptResponse
     * @example
     * // Get one GptResponse
     * const gptResponse = await prisma.gptResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GptResponseFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GptResponseFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GptResponse'> extends True ? Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one GptResponse that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GptResponseFindUniqueOrThrowArgs} args - Arguments to find a GptResponse
     * @example
     * // Get one GptResponse
     * const gptResponse = await prisma.gptResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GptResponseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GptResponseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first GptResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseFindFirstArgs} args - Arguments to find a GptResponse
     * @example
     * // Get one GptResponse
     * const gptResponse = await prisma.gptResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GptResponseFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GptResponseFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GptResponse'> extends True ? Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first GptResponse that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseFindFirstOrThrowArgs} args - Arguments to find a GptResponse
     * @example
     * // Get one GptResponse
     * const gptResponse = await prisma.gptResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GptResponseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GptResponseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more GptResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GptResponses
     * const gptResponses = await prisma.gptResponse.findMany()
     * 
     * // Get first 10 GptResponses
     * const gptResponses = await prisma.gptResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gptResponseWithIdOnly = await prisma.gptResponse.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GptResponseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GptResponseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a GptResponse.
     * @param {GptResponseCreateArgs} args - Arguments to create a GptResponse.
     * @example
     * // Create one GptResponse
     * const GptResponse = await prisma.gptResponse.create({
     *   data: {
     *     // ... data to create a GptResponse
     *   }
     * })
     * 
    **/
    create<T extends GptResponseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GptResponseCreateArgs<ExtArgs>>
    ): Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many GptResponses.
     *     @param {GptResponseCreateManyArgs} args - Arguments to create many GptResponses.
     *     @example
     *     // Create many GptResponses
     *     const gptResponse = await prisma.gptResponse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GptResponseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GptResponseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GptResponse.
     * @param {GptResponseDeleteArgs} args - Arguments to delete one GptResponse.
     * @example
     * // Delete one GptResponse
     * const GptResponse = await prisma.gptResponse.delete({
     *   where: {
     *     // ... filter to delete one GptResponse
     *   }
     * })
     * 
    **/
    delete<T extends GptResponseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GptResponseDeleteArgs<ExtArgs>>
    ): Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one GptResponse.
     * @param {GptResponseUpdateArgs} args - Arguments to update one GptResponse.
     * @example
     * // Update one GptResponse
     * const gptResponse = await prisma.gptResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GptResponseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GptResponseUpdateArgs<ExtArgs>>
    ): Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more GptResponses.
     * @param {GptResponseDeleteManyArgs} args - Arguments to filter GptResponses to delete.
     * @example
     * // Delete a few GptResponses
     * const { count } = await prisma.gptResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GptResponseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GptResponseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GptResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GptResponses
     * const gptResponse = await prisma.gptResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GptResponseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GptResponseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GptResponse.
     * @param {GptResponseUpsertArgs} args - Arguments to update or create a GptResponse.
     * @example
     * // Update or create a GptResponse
     * const gptResponse = await prisma.gptResponse.upsert({
     *   create: {
     *     // ... data to create a GptResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GptResponse we want to update
     *   }
     * })
    **/
    upsert<T extends GptResponseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GptResponseUpsertArgs<ExtArgs>>
    ): Prisma__GptResponseClient<$Types.GetResult<GptResponsePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of GptResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseCountArgs} args - Arguments to filter GptResponses to count.
     * @example
     * // Count the number of GptResponses
     * const count = await prisma.gptResponse.count({
     *   where: {
     *     // ... the filter for the GptResponses we want to count
     *   }
     * })
    **/
    count<T extends GptResponseCountArgs>(
      args?: Subset<T, GptResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GptResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GptResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GptResponseAggregateArgs>(args: Subset<T, GptResponseAggregateArgs>): Prisma.PrismaPromise<GetGptResponseAggregateType<T>>

    /**
     * Group by GptResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GptResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GptResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GptResponseGroupByArgs['orderBy'] }
        : { orderBy?: GptResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GptResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGptResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GptResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GptResponseClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GptResponse base type for findUnique actions
   */
  export type GptResponseFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * Filter, which GptResponse to fetch.
     */
    where: GptResponseWhereUniqueInput
  }

  /**
   * GptResponse findUnique
   */
  export interface GptResponseFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GptResponseFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GptResponse findUniqueOrThrow
   */
  export type GptResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * Filter, which GptResponse to fetch.
     */
    where: GptResponseWhereUniqueInput
  }


  /**
   * GptResponse base type for findFirst actions
   */
  export type GptResponseFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * Filter, which GptResponse to fetch.
     */
    where?: GptResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GptResponses to fetch.
     */
    orderBy?: Enumerable<GptResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GptResponses.
     */
    cursor?: GptResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GptResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GptResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GptResponses.
     */
    distinct?: Enumerable<GptResponseScalarFieldEnum>
  }

  /**
   * GptResponse findFirst
   */
  export interface GptResponseFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GptResponseFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GptResponse findFirstOrThrow
   */
  export type GptResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * Filter, which GptResponse to fetch.
     */
    where?: GptResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GptResponses to fetch.
     */
    orderBy?: Enumerable<GptResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GptResponses.
     */
    cursor?: GptResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GptResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GptResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GptResponses.
     */
    distinct?: Enumerable<GptResponseScalarFieldEnum>
  }


  /**
   * GptResponse findMany
   */
  export type GptResponseFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * Filter, which GptResponses to fetch.
     */
    where?: GptResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GptResponses to fetch.
     */
    orderBy?: Enumerable<GptResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GptResponses.
     */
    cursor?: GptResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GptResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GptResponses.
     */
    skip?: number
    distinct?: Enumerable<GptResponseScalarFieldEnum>
  }


  /**
   * GptResponse create
   */
  export type GptResponseCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a GptResponse.
     */
    data: XOR<GptResponseCreateInput, GptResponseUncheckedCreateInput>
  }


  /**
   * GptResponse createMany
   */
  export type GptResponseCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GptResponses.
     */
    data: Enumerable<GptResponseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GptResponse update
   */
  export type GptResponseUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a GptResponse.
     */
    data: XOR<GptResponseUpdateInput, GptResponseUncheckedUpdateInput>
    /**
     * Choose, which GptResponse to update.
     */
    where: GptResponseWhereUniqueInput
  }


  /**
   * GptResponse updateMany
   */
  export type GptResponseUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GptResponses.
     */
    data: XOR<GptResponseUpdateManyMutationInput, GptResponseUncheckedUpdateManyInput>
    /**
     * Filter which GptResponses to update
     */
    where?: GptResponseWhereInput
  }


  /**
   * GptResponse upsert
   */
  export type GptResponseUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the GptResponse to update in case it exists.
     */
    where: GptResponseWhereUniqueInput
    /**
     * In case the GptResponse found by the `where` argument doesn't exist, create a new GptResponse with this data.
     */
    create: XOR<GptResponseCreateInput, GptResponseUncheckedCreateInput>
    /**
     * In case the GptResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GptResponseUpdateInput, GptResponseUncheckedUpdateInput>
  }


  /**
   * GptResponse delete
   */
  export type GptResponseDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
    /**
     * Filter which GptResponse to delete.
     */
    where: GptResponseWhereUniqueInput
  }


  /**
   * GptResponse deleteMany
   */
  export type GptResponseDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GptResponses to delete
     */
    where?: GptResponseWhereInput
  }


  /**
   * GptResponse without action
   */
  export type GptResponseArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GptResponse
     */
    select?: GptResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GptResponseInclude<ExtArgs> | null
  }



  /**
   * Model Task
   */


  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    userId: number | null
  }

  export type TaskSumAggregateOutputType = {
    userId: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    description: string | null
    time: string | null
    isDone: boolean | null
    userId: number | null
    createdAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    description: string | null
    time: string | null
    isDone: boolean | null
    userId: number | null
    createdAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    description: number
    time: number
    isDone: number
    userId: number
    createdAt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    userId?: true
  }

  export type TaskSumAggregateInputType = {
    userId?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    description?: true
    time?: true
    isDone?: true
    userId?: true
    createdAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    description?: true
    time?: true
    isDone?: true
    userId?: true
    createdAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    description?: true
    time?: true
    isDone?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: Enumerable<TaskOrderByWithAggregationInput>
    by: TaskScalarFieldEnum[]
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }


  export type TaskGroupByOutputType = {
    id: string
    description: string
    time: string
    isDone: boolean
    userId: number
    createdAt: Date
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    time?: boolean
    isDone?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    description?: boolean
    time?: boolean
    isDone?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type TaskGetPayload<S extends boolean | null | undefined | TaskArgs> = $Types.GetResult<TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaskFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Task'> extends True ? Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaskFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Task'> extends True ? Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
    **/
    create<T extends TaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskCreateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Tasks.
     *     @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
    **/
    delete<T extends TaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
    **/
    upsert<T extends TaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Task base type for findUnique actions
   */
  export type TaskFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUnique
   */
  export interface TaskFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TaskFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task base type for findFirst actions
   */
  export type TaskFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }

  /**
   * Task findFirst
   */
  export interface TaskFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TaskFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }


  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: Enumerable<TaskCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }


  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }


  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }


  /**
   * Task without action
   */
  export type TaskArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
  }



  /**
   * Model File
   */


  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    userId: number | null
  }

  export type FileSumAggregateOutputType = {
    userId: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    key: string | null
    uploadUrl: string | null
    userId: number | null
    createdAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    key: string | null
    uploadUrl: string | null
    userId: number | null
    createdAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    type: number
    key: number
    uploadUrl: number
    userId: number
    createdAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    userId?: true
  }

  export type FileSumAggregateInputType = {
    userId?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    key?: true
    uploadUrl?: true
    userId?: true
    createdAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    key?: true
    uploadUrl?: true
    userId?: true
    createdAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    key?: true
    uploadUrl?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: Enumerable<FileOrderByWithAggregationInput>
    by: FileScalarFieldEnum[]
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }


  export type FileGroupByOutputType = {
    id: string
    name: string
    type: string
    key: string
    uploadUrl: string
    userId: number
    createdAt: Date
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    key?: boolean
    uploadUrl?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    key?: boolean
    uploadUrl?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type FileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type FileGetPayload<S extends boolean | null | undefined | FileArgs> = $Types.GetResult<FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FileFindManyArgs, 'select' | 'include'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FileFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'File'> extends True ? Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one File that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FileFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'File'> extends True ? Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first File that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FilePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
    **/
    create<T extends FileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FileCreateArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Files.
     *     @param {FileCreateManyArgs} args - Arguments to create many Files.
     *     @example
     *     // Create many Files
     *     const file = await prisma.file.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
    **/
    delete<T extends FileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FileDeleteArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FileUpdateArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
    **/
    upsert<T extends FileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FileUpsertArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * File base type for findUnique actions
   */
  export type FileFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUnique
   */
  export interface FileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FileFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }


  /**
   * File base type for findFirst actions
   */
  export type FileFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: Enumerable<FileScalarFieldEnum>
  }

  /**
   * File findFirst
   */
  export interface FileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FileFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }


  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: Enumerable<FileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }


  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
  }


  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }


  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }


  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
  }


  /**
   * File without action
   */
  export type FileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
  }



  /**
   * Model ContactFormMessage
   */


  export type AggregateContactFormMessage = {
    _count: ContactFormMessageCountAggregateOutputType | null
    _avg: ContactFormMessageAvgAggregateOutputType | null
    _sum: ContactFormMessageSumAggregateOutputType | null
    _min: ContactFormMessageMinAggregateOutputType | null
    _max: ContactFormMessageMaxAggregateOutputType | null
  }

  export type ContactFormMessageAvgAggregateOutputType = {
    userId: number | null
  }

  export type ContactFormMessageSumAggregateOutputType = {
    userId: number | null
  }

  export type ContactFormMessageMinAggregateOutputType = {
    id: string | null
    content: string | null
    userId: number | null
    createdAt: Date | null
    isRead: boolean | null
    repliedAt: Date | null
  }

  export type ContactFormMessageMaxAggregateOutputType = {
    id: string | null
    content: string | null
    userId: number | null
    createdAt: Date | null
    isRead: boolean | null
    repliedAt: Date | null
  }

  export type ContactFormMessageCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    createdAt: number
    isRead: number
    repliedAt: number
    _all: number
  }


  export type ContactFormMessageAvgAggregateInputType = {
    userId?: true
  }

  export type ContactFormMessageSumAggregateInputType = {
    userId?: true
  }

  export type ContactFormMessageMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    isRead?: true
    repliedAt?: true
  }

  export type ContactFormMessageMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    isRead?: true
    repliedAt?: true
  }

  export type ContactFormMessageCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    isRead?: true
    repliedAt?: true
    _all?: true
  }

  export type ContactFormMessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactFormMessage to aggregate.
     */
    where?: ContactFormMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormMessages to fetch.
     */
    orderBy?: Enumerable<ContactFormMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactFormMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactFormMessages
    **/
    _count?: true | ContactFormMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactFormMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactFormMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactFormMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactFormMessageMaxAggregateInputType
  }

  export type GetContactFormMessageAggregateType<T extends ContactFormMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateContactFormMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactFormMessage[P]>
      : GetScalarType<T[P], AggregateContactFormMessage[P]>
  }




  export type ContactFormMessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContactFormMessageWhereInput
    orderBy?: Enumerable<ContactFormMessageOrderByWithAggregationInput>
    by: ContactFormMessageScalarFieldEnum[]
    having?: ContactFormMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactFormMessageCountAggregateInputType | true
    _avg?: ContactFormMessageAvgAggregateInputType
    _sum?: ContactFormMessageSumAggregateInputType
    _min?: ContactFormMessageMinAggregateInputType
    _max?: ContactFormMessageMaxAggregateInputType
  }


  export type ContactFormMessageGroupByOutputType = {
    id: string
    content: string
    userId: number
    createdAt: Date
    isRead: boolean
    repliedAt: Date | null
    _count: ContactFormMessageCountAggregateOutputType | null
    _avg: ContactFormMessageAvgAggregateOutputType | null
    _sum: ContactFormMessageSumAggregateOutputType | null
    _min: ContactFormMessageMinAggregateOutputType | null
    _max: ContactFormMessageMaxAggregateOutputType | null
  }

  type GetContactFormMessageGroupByPayload<T extends ContactFormMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContactFormMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactFormMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactFormMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ContactFormMessageGroupByOutputType[P]>
        }
      >
    >


  export type ContactFormMessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    createdAt?: boolean
    isRead?: boolean
    repliedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["contactFormMessage"]>

  export type ContactFormMessageSelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    createdAt?: boolean
    isRead?: boolean
    repliedAt?: boolean
  }

  export type ContactFormMessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type ContactFormMessageGetPayload<S extends boolean | null | undefined | ContactFormMessageArgs> = $Types.GetResult<ContactFormMessagePayload, S>

  type ContactFormMessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ContactFormMessageFindManyArgs, 'select' | 'include'> & {
      select?: ContactFormMessageCountAggregateInputType | true
    }

  export interface ContactFormMessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactFormMessage'], meta: { name: 'ContactFormMessage' } }
    /**
     * Find zero or one ContactFormMessage that matches the filter.
     * @param {ContactFormMessageFindUniqueArgs} args - Arguments to find a ContactFormMessage
     * @example
     * // Get one ContactFormMessage
     * const contactFormMessage = await prisma.contactFormMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFormMessageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactFormMessageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContactFormMessage'> extends True ? Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ContactFormMessage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactFormMessageFindUniqueOrThrowArgs} args - Arguments to find a ContactFormMessage
     * @example
     * // Get one ContactFormMessage
     * const contactFormMessage = await prisma.contactFormMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFormMessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormMessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ContactFormMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageFindFirstArgs} args - Arguments to find a ContactFormMessage
     * @example
     * // Get one ContactFormMessage
     * const contactFormMessage = await prisma.contactFormMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFormMessageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactFormMessageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContactFormMessage'> extends True ? Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ContactFormMessage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageFindFirstOrThrowArgs} args - Arguments to find a ContactFormMessage
     * @example
     * // Get one ContactFormMessage
     * const contactFormMessage = await prisma.contactFormMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFormMessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormMessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ContactFormMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactFormMessages
     * const contactFormMessages = await prisma.contactFormMessage.findMany()
     * 
     * // Get first 10 ContactFormMessages
     * const contactFormMessages = await prisma.contactFormMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactFormMessageWithIdOnly = await prisma.contactFormMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFormMessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormMessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ContactFormMessage.
     * @param {ContactFormMessageCreateArgs} args - Arguments to create a ContactFormMessage.
     * @example
     * // Create one ContactFormMessage
     * const ContactFormMessage = await prisma.contactFormMessage.create({
     *   data: {
     *     // ... data to create a ContactFormMessage
     *   }
     * })
     * 
    **/
    create<T extends ContactFormMessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormMessageCreateArgs<ExtArgs>>
    ): Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ContactFormMessages.
     *     @param {ContactFormMessageCreateManyArgs} args - Arguments to create many ContactFormMessages.
     *     @example
     *     // Create many ContactFormMessages
     *     const contactFormMessage = await prisma.contactFormMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactFormMessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormMessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ContactFormMessage.
     * @param {ContactFormMessageDeleteArgs} args - Arguments to delete one ContactFormMessage.
     * @example
     * // Delete one ContactFormMessage
     * const ContactFormMessage = await prisma.contactFormMessage.delete({
     *   where: {
     *     // ... filter to delete one ContactFormMessage
     *   }
     * })
     * 
    **/
    delete<T extends ContactFormMessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormMessageDeleteArgs<ExtArgs>>
    ): Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ContactFormMessage.
     * @param {ContactFormMessageUpdateArgs} args - Arguments to update one ContactFormMessage.
     * @example
     * // Update one ContactFormMessage
     * const contactFormMessage = await prisma.contactFormMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactFormMessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormMessageUpdateArgs<ExtArgs>>
    ): Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ContactFormMessages.
     * @param {ContactFormMessageDeleteManyArgs} args - Arguments to filter ContactFormMessages to delete.
     * @example
     * // Delete a few ContactFormMessages
     * const { count } = await prisma.contactFormMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactFormMessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFormMessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactFormMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactFormMessages
     * const contactFormMessage = await prisma.contactFormMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactFormMessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormMessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContactFormMessage.
     * @param {ContactFormMessageUpsertArgs} args - Arguments to update or create a ContactFormMessage.
     * @example
     * // Update or create a ContactFormMessage
     * const contactFormMessage = await prisma.contactFormMessage.upsert({
     *   create: {
     *     // ... data to create a ContactFormMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactFormMessage we want to update
     *   }
     * })
    **/
    upsert<T extends ContactFormMessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFormMessageUpsertArgs<ExtArgs>>
    ): Prisma__ContactFormMessageClient<$Types.GetResult<ContactFormMessagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ContactFormMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageCountArgs} args - Arguments to filter ContactFormMessages to count.
     * @example
     * // Count the number of ContactFormMessages
     * const count = await prisma.contactFormMessage.count({
     *   where: {
     *     // ... the filter for the ContactFormMessages we want to count
     *   }
     * })
    **/
    count<T extends ContactFormMessageCountArgs>(
      args?: Subset<T, ContactFormMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactFormMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactFormMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactFormMessageAggregateArgs>(args: Subset<T, ContactFormMessageAggregateArgs>): Prisma.PrismaPromise<GetContactFormMessageAggregateType<T>>

    /**
     * Group by ContactFormMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactFormMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactFormMessageGroupByArgs['orderBy'] }
        : { orderBy?: ContactFormMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactFormMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactFormMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactFormMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactFormMessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ContactFormMessage base type for findUnique actions
   */
  export type ContactFormMessageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * Filter, which ContactFormMessage to fetch.
     */
    where: ContactFormMessageWhereUniqueInput
  }

  /**
   * ContactFormMessage findUnique
   */
  export interface ContactFormMessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContactFormMessageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ContactFormMessage findUniqueOrThrow
   */
  export type ContactFormMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * Filter, which ContactFormMessage to fetch.
     */
    where: ContactFormMessageWhereUniqueInput
  }


  /**
   * ContactFormMessage base type for findFirst actions
   */
  export type ContactFormMessageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * Filter, which ContactFormMessage to fetch.
     */
    where?: ContactFormMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormMessages to fetch.
     */
    orderBy?: Enumerable<ContactFormMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactFormMessages.
     */
    cursor?: ContactFormMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactFormMessages.
     */
    distinct?: Enumerable<ContactFormMessageScalarFieldEnum>
  }

  /**
   * ContactFormMessage findFirst
   */
  export interface ContactFormMessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContactFormMessageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ContactFormMessage findFirstOrThrow
   */
  export type ContactFormMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * Filter, which ContactFormMessage to fetch.
     */
    where?: ContactFormMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormMessages to fetch.
     */
    orderBy?: Enumerable<ContactFormMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactFormMessages.
     */
    cursor?: ContactFormMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactFormMessages.
     */
    distinct?: Enumerable<ContactFormMessageScalarFieldEnum>
  }


  /**
   * ContactFormMessage findMany
   */
  export type ContactFormMessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * Filter, which ContactFormMessages to fetch.
     */
    where?: ContactFormMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormMessages to fetch.
     */
    orderBy?: Enumerable<ContactFormMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactFormMessages.
     */
    cursor?: ContactFormMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormMessages.
     */
    skip?: number
    distinct?: Enumerable<ContactFormMessageScalarFieldEnum>
  }


  /**
   * ContactFormMessage create
   */
  export type ContactFormMessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactFormMessage.
     */
    data: XOR<ContactFormMessageCreateInput, ContactFormMessageUncheckedCreateInput>
  }


  /**
   * ContactFormMessage createMany
   */
  export type ContactFormMessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactFormMessages.
     */
    data: Enumerable<ContactFormMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ContactFormMessage update
   */
  export type ContactFormMessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactFormMessage.
     */
    data: XOR<ContactFormMessageUpdateInput, ContactFormMessageUncheckedUpdateInput>
    /**
     * Choose, which ContactFormMessage to update.
     */
    where: ContactFormMessageWhereUniqueInput
  }


  /**
   * ContactFormMessage updateMany
   */
  export type ContactFormMessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactFormMessages.
     */
    data: XOR<ContactFormMessageUpdateManyMutationInput, ContactFormMessageUncheckedUpdateManyInput>
    /**
     * Filter which ContactFormMessages to update
     */
    where?: ContactFormMessageWhereInput
  }


  /**
   * ContactFormMessage upsert
   */
  export type ContactFormMessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactFormMessage to update in case it exists.
     */
    where: ContactFormMessageWhereUniqueInput
    /**
     * In case the ContactFormMessage found by the `where` argument doesn't exist, create a new ContactFormMessage with this data.
     */
    create: XOR<ContactFormMessageCreateInput, ContactFormMessageUncheckedCreateInput>
    /**
     * In case the ContactFormMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactFormMessageUpdateInput, ContactFormMessageUncheckedUpdateInput>
  }


  /**
   * ContactFormMessage delete
   */
  export type ContactFormMessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
    /**
     * Filter which ContactFormMessage to delete.
     */
    where: ContactFormMessageWhereUniqueInput
  }


  /**
   * ContactFormMessage deleteMany
   */
  export type ContactFormMessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactFormMessages to delete
     */
    where?: ContactFormMessageWhereInput
  }


  /**
   * ContactFormMessage without action
   */
  export type ContactFormMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactFormMessage
     */
    select?: ContactFormMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormMessageInclude<ExtArgs> | null
  }



  /**
   * Model DailyStats
   */


  export type AggregateDailyStats = {
    _count: DailyStatsCountAggregateOutputType | null
    _avg: DailyStatsAvgAggregateOutputType | null
    _sum: DailyStatsSumAggregateOutputType | null
    _min: DailyStatsMinAggregateOutputType | null
    _max: DailyStatsMaxAggregateOutputType | null
  }

  export type DailyStatsAvgAggregateOutputType = {
    id: number | null
    totalViews: number | null
    userCount: number | null
    paidUserCount: number | null
    userDelta: number | null
    paidUserDelta: number | null
    totalRevenue: number | null
    totalProfit: number | null
  }

  export type DailyStatsSumAggregateOutputType = {
    id: number | null
    totalViews: number | null
    userCount: number | null
    paidUserCount: number | null
    userDelta: number | null
    paidUserDelta: number | null
    totalRevenue: number | null
    totalProfit: number | null
  }

  export type DailyStatsMinAggregateOutputType = {
    id: number | null
    date: Date | null
    totalViews: number | null
    prevDayViewsChangePercent: string | null
    userCount: number | null
    paidUserCount: number | null
    userDelta: number | null
    paidUserDelta: number | null
    totalRevenue: number | null
    totalProfit: number | null
  }

  export type DailyStatsMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    totalViews: number | null
    prevDayViewsChangePercent: string | null
    userCount: number | null
    paidUserCount: number | null
    userDelta: number | null
    paidUserDelta: number | null
    totalRevenue: number | null
    totalProfit: number | null
  }

  export type DailyStatsCountAggregateOutputType = {
    id: number
    date: number
    totalViews: number
    prevDayViewsChangePercent: number
    userCount: number
    paidUserCount: number
    userDelta: number
    paidUserDelta: number
    totalRevenue: number
    totalProfit: number
    _all: number
  }


  export type DailyStatsAvgAggregateInputType = {
    id?: true
    totalViews?: true
    userCount?: true
    paidUserCount?: true
    userDelta?: true
    paidUserDelta?: true
    totalRevenue?: true
    totalProfit?: true
  }

  export type DailyStatsSumAggregateInputType = {
    id?: true
    totalViews?: true
    userCount?: true
    paidUserCount?: true
    userDelta?: true
    paidUserDelta?: true
    totalRevenue?: true
    totalProfit?: true
  }

  export type DailyStatsMinAggregateInputType = {
    id?: true
    date?: true
    totalViews?: true
    prevDayViewsChangePercent?: true
    userCount?: true
    paidUserCount?: true
    userDelta?: true
    paidUserDelta?: true
    totalRevenue?: true
    totalProfit?: true
  }

  export type DailyStatsMaxAggregateInputType = {
    id?: true
    date?: true
    totalViews?: true
    prevDayViewsChangePercent?: true
    userCount?: true
    paidUserCount?: true
    userDelta?: true
    paidUserDelta?: true
    totalRevenue?: true
    totalProfit?: true
  }

  export type DailyStatsCountAggregateInputType = {
    id?: true
    date?: true
    totalViews?: true
    prevDayViewsChangePercent?: true
    userCount?: true
    paidUserCount?: true
    userDelta?: true
    paidUserDelta?: true
    totalRevenue?: true
    totalProfit?: true
    _all?: true
  }

  export type DailyStatsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyStats to aggregate.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyStats
    **/
    _count?: true | DailyStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyStatsMaxAggregateInputType
  }

  export type GetDailyStatsAggregateType<T extends DailyStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyStats[P]>
      : GetScalarType<T[P], AggregateDailyStats[P]>
  }




  export type DailyStatsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DailyStatsWhereInput
    orderBy?: Enumerable<DailyStatsOrderByWithAggregationInput>
    by: DailyStatsScalarFieldEnum[]
    having?: DailyStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyStatsCountAggregateInputType | true
    _avg?: DailyStatsAvgAggregateInputType
    _sum?: DailyStatsSumAggregateInputType
    _min?: DailyStatsMinAggregateInputType
    _max?: DailyStatsMaxAggregateInputType
  }


  export type DailyStatsGroupByOutputType = {
    id: number
    date: Date
    totalViews: number
    prevDayViewsChangePercent: string
    userCount: number
    paidUserCount: number
    userDelta: number
    paidUserDelta: number
    totalRevenue: number
    totalProfit: number
    _count: DailyStatsCountAggregateOutputType | null
    _avg: DailyStatsAvgAggregateOutputType | null
    _sum: DailyStatsSumAggregateOutputType | null
    _min: DailyStatsMinAggregateOutputType | null
    _max: DailyStatsMaxAggregateOutputType | null
  }

  type GetDailyStatsGroupByPayload<T extends DailyStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DailyStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyStatsGroupByOutputType[P]>
            : GetScalarType<T[P], DailyStatsGroupByOutputType[P]>
        }
      >
    >


  export type DailyStatsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    totalViews?: boolean
    prevDayViewsChangePercent?: boolean
    userCount?: boolean
    paidUserCount?: boolean
    userDelta?: boolean
    paidUserDelta?: boolean
    totalRevenue?: boolean
    totalProfit?: boolean
    sources?: boolean | DailyStats$sourcesArgs<ExtArgs>
    _count?: boolean | DailyStatsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["dailyStats"]>

  export type DailyStatsSelectScalar = {
    id?: boolean
    date?: boolean
    totalViews?: boolean
    prevDayViewsChangePercent?: boolean
    userCount?: boolean
    paidUserCount?: boolean
    userDelta?: boolean
    paidUserDelta?: boolean
    totalRevenue?: boolean
    totalProfit?: boolean
  }

  export type DailyStatsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sources?: boolean | DailyStats$sourcesArgs<ExtArgs>
    _count?: boolean | DailyStatsCountOutputTypeArgs<ExtArgs>
  }


  type DailyStatsGetPayload<S extends boolean | null | undefined | DailyStatsArgs> = $Types.GetResult<DailyStatsPayload, S>

  type DailyStatsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DailyStatsFindManyArgs, 'select' | 'include'> & {
      select?: DailyStatsCountAggregateInputType | true
    }

  export interface DailyStatsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyStats'], meta: { name: 'DailyStats' } }
    /**
     * Find zero or one DailyStats that matches the filter.
     * @param {DailyStatsFindUniqueArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DailyStatsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DailyStatsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DailyStats'> extends True ? Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one DailyStats that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DailyStatsFindUniqueOrThrowArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DailyStatsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first DailyStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsFindFirstArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DailyStatsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DailyStatsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DailyStats'> extends True ? Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first DailyStats that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsFindFirstOrThrowArgs} args - Arguments to find a DailyStats
     * @example
     * // Get one DailyStats
     * const dailyStats = await prisma.dailyStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DailyStatsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more DailyStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyStats
     * const dailyStats = await prisma.dailyStats.findMany()
     * 
     * // Get first 10 DailyStats
     * const dailyStats = await prisma.dailyStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyStatsWithIdOnly = await prisma.dailyStats.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DailyStatsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a DailyStats.
     * @param {DailyStatsCreateArgs} args - Arguments to create a DailyStats.
     * @example
     * // Create one DailyStats
     * const DailyStats = await prisma.dailyStats.create({
     *   data: {
     *     // ... data to create a DailyStats
     *   }
     * })
     * 
    **/
    create<T extends DailyStatsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsCreateArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many DailyStats.
     *     @param {DailyStatsCreateManyArgs} args - Arguments to create many DailyStats.
     *     @example
     *     // Create many DailyStats
     *     const dailyStats = await prisma.dailyStats.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DailyStatsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DailyStats.
     * @param {DailyStatsDeleteArgs} args - Arguments to delete one DailyStats.
     * @example
     * // Delete one DailyStats
     * const DailyStats = await prisma.dailyStats.delete({
     *   where: {
     *     // ... filter to delete one DailyStats
     *   }
     * })
     * 
    **/
    delete<T extends DailyStatsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsDeleteArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one DailyStats.
     * @param {DailyStatsUpdateArgs} args - Arguments to update one DailyStats.
     * @example
     * // Update one DailyStats
     * const dailyStats = await prisma.dailyStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DailyStatsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsUpdateArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more DailyStats.
     * @param {DailyStatsDeleteManyArgs} args - Arguments to filter DailyStats to delete.
     * @example
     * // Delete a few DailyStats
     * const { count } = await prisma.dailyStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DailyStatsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DailyStatsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyStats
     * const dailyStats = await prisma.dailyStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DailyStatsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyStats.
     * @param {DailyStatsUpsertArgs} args - Arguments to update or create a DailyStats.
     * @example
     * // Update or create a DailyStats
     * const dailyStats = await prisma.dailyStats.upsert({
     *   create: {
     *     // ... data to create a DailyStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyStats we want to update
     *   }
     * })
    **/
    upsert<T extends DailyStatsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DailyStatsUpsertArgs<ExtArgs>>
    ): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsCountArgs} args - Arguments to filter DailyStats to count.
     * @example
     * // Count the number of DailyStats
     * const count = await prisma.dailyStats.count({
     *   where: {
     *     // ... the filter for the DailyStats we want to count
     *   }
     * })
    **/
    count<T extends DailyStatsCountArgs>(
      args?: Subset<T, DailyStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyStatsAggregateArgs>(args: Subset<T, DailyStatsAggregateArgs>): Prisma.PrismaPromise<GetDailyStatsAggregateType<T>>

    /**
     * Group by DailyStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyStatsGroupByArgs['orderBy'] }
        : { orderBy?: DailyStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DailyStatsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sources<T extends DailyStats$sourcesArgs<ExtArgs> = {}>(args?: Subset<T, DailyStats$sourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DailyStats base type for findUnique actions
   */
  export type DailyStatsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where: DailyStatsWhereUniqueInput
  }

  /**
   * DailyStats findUnique
   */
  export interface DailyStatsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DailyStatsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailyStats findUniqueOrThrow
   */
  export type DailyStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where: DailyStatsWhereUniqueInput
  }


  /**
   * DailyStats base type for findFirst actions
   */
  export type DailyStatsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyStats.
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyStats.
     */
    distinct?: Enumerable<DailyStatsScalarFieldEnum>
  }

  /**
   * DailyStats findFirst
   */
  export interface DailyStatsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DailyStatsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailyStats findFirstOrThrow
   */
  export type DailyStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyStats.
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyStats.
     */
    distinct?: Enumerable<DailyStatsScalarFieldEnum>
  }


  /**
   * DailyStats findMany
   */
  export type DailyStatsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * Filter, which DailyStats to fetch.
     */
    where?: DailyStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyStats to fetch.
     */
    orderBy?: Enumerable<DailyStatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyStats.
     */
    cursor?: DailyStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyStats.
     */
    skip?: number
    distinct?: Enumerable<DailyStatsScalarFieldEnum>
  }


  /**
   * DailyStats create
   */
  export type DailyStatsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyStats.
     */
    data?: XOR<DailyStatsCreateInput, DailyStatsUncheckedCreateInput>
  }


  /**
   * DailyStats createMany
   */
  export type DailyStatsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyStats.
     */
    data: Enumerable<DailyStatsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DailyStats update
   */
  export type DailyStatsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyStats.
     */
    data: XOR<DailyStatsUpdateInput, DailyStatsUncheckedUpdateInput>
    /**
     * Choose, which DailyStats to update.
     */
    where: DailyStatsWhereUniqueInput
  }


  /**
   * DailyStats updateMany
   */
  export type DailyStatsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyStats.
     */
    data: XOR<DailyStatsUpdateManyMutationInput, DailyStatsUncheckedUpdateManyInput>
    /**
     * Filter which DailyStats to update
     */
    where?: DailyStatsWhereInput
  }


  /**
   * DailyStats upsert
   */
  export type DailyStatsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyStats to update in case it exists.
     */
    where: DailyStatsWhereUniqueInput
    /**
     * In case the DailyStats found by the `where` argument doesn't exist, create a new DailyStats with this data.
     */
    create: XOR<DailyStatsCreateInput, DailyStatsUncheckedCreateInput>
    /**
     * In case the DailyStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyStatsUpdateInput, DailyStatsUncheckedUpdateInput>
  }


  /**
   * DailyStats delete
   */
  export type DailyStatsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
    /**
     * Filter which DailyStats to delete.
     */
    where: DailyStatsWhereUniqueInput
  }


  /**
   * DailyStats deleteMany
   */
  export type DailyStatsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyStats to delete
     */
    where?: DailyStatsWhereInput
  }


  /**
   * DailyStats.sources
   */
  export type DailyStats$sourcesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    where?: PageViewSourceWhereInput
    orderBy?: Enumerable<PageViewSourceOrderByWithRelationInput>
    cursor?: PageViewSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PageViewSourceScalarFieldEnum>
  }


  /**
   * DailyStats without action
   */
  export type DailyStatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyStats
     */
    select?: DailyStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DailyStatsInclude<ExtArgs> | null
  }



  /**
   * Model PageViewSource
   */


  export type AggregatePageViewSource = {
    _count: PageViewSourceCountAggregateOutputType | null
    _avg: PageViewSourceAvgAggregateOutputType | null
    _sum: PageViewSourceSumAggregateOutputType | null
    _min: PageViewSourceMinAggregateOutputType | null
    _max: PageViewSourceMaxAggregateOutputType | null
  }

  export type PageViewSourceAvgAggregateOutputType = {
    visitors: number | null
    dailyStatsId: number | null
  }

  export type PageViewSourceSumAggregateOutputType = {
    visitors: number | null
    dailyStatsId: number | null
  }

  export type PageViewSourceMinAggregateOutputType = {
    date: Date | null
    name: string | null
    visitors: number | null
    dailyStatsId: number | null
  }

  export type PageViewSourceMaxAggregateOutputType = {
    date: Date | null
    name: string | null
    visitors: number | null
    dailyStatsId: number | null
  }

  export type PageViewSourceCountAggregateOutputType = {
    date: number
    name: number
    visitors: number
    dailyStatsId: number
    _all: number
  }


  export type PageViewSourceAvgAggregateInputType = {
    visitors?: true
    dailyStatsId?: true
  }

  export type PageViewSourceSumAggregateInputType = {
    visitors?: true
    dailyStatsId?: true
  }

  export type PageViewSourceMinAggregateInputType = {
    date?: true
    name?: true
    visitors?: true
    dailyStatsId?: true
  }

  export type PageViewSourceMaxAggregateInputType = {
    date?: true
    name?: true
    visitors?: true
    dailyStatsId?: true
  }

  export type PageViewSourceCountAggregateInputType = {
    date?: true
    name?: true
    visitors?: true
    dailyStatsId?: true
    _all?: true
  }

  export type PageViewSourceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageViewSource to aggregate.
     */
    where?: PageViewSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViewSources to fetch.
     */
    orderBy?: Enumerable<PageViewSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageViewSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViewSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViewSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PageViewSources
    **/
    _count?: true | PageViewSourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageViewSourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageViewSourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageViewSourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageViewSourceMaxAggregateInputType
  }

  export type GetPageViewSourceAggregateType<T extends PageViewSourceAggregateArgs> = {
        [P in keyof T & keyof AggregatePageViewSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageViewSource[P]>
      : GetScalarType<T[P], AggregatePageViewSource[P]>
  }




  export type PageViewSourceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PageViewSourceWhereInput
    orderBy?: Enumerable<PageViewSourceOrderByWithAggregationInput>
    by: PageViewSourceScalarFieldEnum[]
    having?: PageViewSourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageViewSourceCountAggregateInputType | true
    _avg?: PageViewSourceAvgAggregateInputType
    _sum?: PageViewSourceSumAggregateInputType
    _min?: PageViewSourceMinAggregateInputType
    _max?: PageViewSourceMaxAggregateInputType
  }


  export type PageViewSourceGroupByOutputType = {
    date: Date
    name: string
    visitors: number
    dailyStatsId: number | null
    _count: PageViewSourceCountAggregateOutputType | null
    _avg: PageViewSourceAvgAggregateOutputType | null
    _sum: PageViewSourceSumAggregateOutputType | null
    _min: PageViewSourceMinAggregateOutputType | null
    _max: PageViewSourceMaxAggregateOutputType | null
  }

  type GetPageViewSourceGroupByPayload<T extends PageViewSourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PageViewSourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageViewSourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageViewSourceGroupByOutputType[P]>
            : GetScalarType<T[P], PageViewSourceGroupByOutputType[P]>
        }
      >
    >


  export type PageViewSourceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    date?: boolean
    name?: boolean
    visitors?: boolean
    dailyStatsId?: boolean
    dailyStats?: boolean | DailyStatsArgs<ExtArgs>
  }, ExtArgs["result"]["pageViewSource"]>

  export type PageViewSourceSelectScalar = {
    date?: boolean
    name?: boolean
    visitors?: boolean
    dailyStatsId?: boolean
  }

  export type PageViewSourceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    dailyStats?: boolean | DailyStatsArgs<ExtArgs>
  }


  type PageViewSourceGetPayload<S extends boolean | null | undefined | PageViewSourceArgs> = $Types.GetResult<PageViewSourcePayload, S>

  type PageViewSourceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PageViewSourceFindManyArgs, 'select' | 'include'> & {
      select?: PageViewSourceCountAggregateInputType | true
    }

  export interface PageViewSourceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageViewSource'], meta: { name: 'PageViewSource' } }
    /**
     * Find zero or one PageViewSource that matches the filter.
     * @param {PageViewSourceFindUniqueArgs} args - Arguments to find a PageViewSource
     * @example
     * // Get one PageViewSource
     * const pageViewSource = await prisma.pageViewSource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PageViewSourceFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PageViewSourceFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PageViewSource'> extends True ? Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PageViewSource that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PageViewSourceFindUniqueOrThrowArgs} args - Arguments to find a PageViewSource
     * @example
     * // Get one PageViewSource
     * const pageViewSource = await prisma.pageViewSource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PageViewSourceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PageViewSourceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PageViewSource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceFindFirstArgs} args - Arguments to find a PageViewSource
     * @example
     * // Get one PageViewSource
     * const pageViewSource = await prisma.pageViewSource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PageViewSourceFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PageViewSourceFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PageViewSource'> extends True ? Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PageViewSource that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceFindFirstOrThrowArgs} args - Arguments to find a PageViewSource
     * @example
     * // Get one PageViewSource
     * const pageViewSource = await prisma.pageViewSource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PageViewSourceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PageViewSourceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PageViewSources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageViewSources
     * const pageViewSources = await prisma.pageViewSource.findMany()
     * 
     * // Get first 10 PageViewSources
     * const pageViewSources = await prisma.pageViewSource.findMany({ take: 10 })
     * 
     * // Only select the `date`
     * const pageViewSourceWithDateOnly = await prisma.pageViewSource.findMany({ select: { date: true } })
     * 
    **/
    findMany<T extends PageViewSourceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PageViewSourceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PageViewSource.
     * @param {PageViewSourceCreateArgs} args - Arguments to create a PageViewSource.
     * @example
     * // Create one PageViewSource
     * const PageViewSource = await prisma.pageViewSource.create({
     *   data: {
     *     // ... data to create a PageViewSource
     *   }
     * })
     * 
    **/
    create<T extends PageViewSourceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PageViewSourceCreateArgs<ExtArgs>>
    ): Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PageViewSources.
     *     @param {PageViewSourceCreateManyArgs} args - Arguments to create many PageViewSources.
     *     @example
     *     // Create many PageViewSources
     *     const pageViewSource = await prisma.pageViewSource.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PageViewSourceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PageViewSourceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PageViewSource.
     * @param {PageViewSourceDeleteArgs} args - Arguments to delete one PageViewSource.
     * @example
     * // Delete one PageViewSource
     * const PageViewSource = await prisma.pageViewSource.delete({
     *   where: {
     *     // ... filter to delete one PageViewSource
     *   }
     * })
     * 
    **/
    delete<T extends PageViewSourceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PageViewSourceDeleteArgs<ExtArgs>>
    ): Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PageViewSource.
     * @param {PageViewSourceUpdateArgs} args - Arguments to update one PageViewSource.
     * @example
     * // Update one PageViewSource
     * const pageViewSource = await prisma.pageViewSource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PageViewSourceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PageViewSourceUpdateArgs<ExtArgs>>
    ): Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PageViewSources.
     * @param {PageViewSourceDeleteManyArgs} args - Arguments to filter PageViewSources to delete.
     * @example
     * // Delete a few PageViewSources
     * const { count } = await prisma.pageViewSource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PageViewSourceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PageViewSourceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageViewSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageViewSources
     * const pageViewSource = await prisma.pageViewSource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PageViewSourceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PageViewSourceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PageViewSource.
     * @param {PageViewSourceUpsertArgs} args - Arguments to update or create a PageViewSource.
     * @example
     * // Update or create a PageViewSource
     * const pageViewSource = await prisma.pageViewSource.upsert({
     *   create: {
     *     // ... data to create a PageViewSource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageViewSource we want to update
     *   }
     * })
    **/
    upsert<T extends PageViewSourceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PageViewSourceUpsertArgs<ExtArgs>>
    ): Prisma__PageViewSourceClient<$Types.GetResult<PageViewSourcePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PageViewSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceCountArgs} args - Arguments to filter PageViewSources to count.
     * @example
     * // Count the number of PageViewSources
     * const count = await prisma.pageViewSource.count({
     *   where: {
     *     // ... the filter for the PageViewSources we want to count
     *   }
     * })
    **/
    count<T extends PageViewSourceCountArgs>(
      args?: Subset<T, PageViewSourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageViewSourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageViewSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageViewSourceAggregateArgs>(args: Subset<T, PageViewSourceAggregateArgs>): Prisma.PrismaPromise<GetPageViewSourceAggregateType<T>>

    /**
     * Group by PageViewSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewSourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageViewSourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageViewSourceGroupByArgs['orderBy'] }
        : { orderBy?: PageViewSourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageViewSourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageViewSourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PageViewSource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PageViewSourceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dailyStats<T extends DailyStatsArgs<ExtArgs> = {}>(args?: Subset<T, DailyStatsArgs<ExtArgs>>): Prisma__DailyStatsClient<$Types.GetResult<DailyStatsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PageViewSource base type for findUnique actions
   */
  export type PageViewSourceFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * Filter, which PageViewSource to fetch.
     */
    where: PageViewSourceWhereUniqueInput
  }

  /**
   * PageViewSource findUnique
   */
  export interface PageViewSourceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PageViewSourceFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PageViewSource findUniqueOrThrow
   */
  export type PageViewSourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * Filter, which PageViewSource to fetch.
     */
    where: PageViewSourceWhereUniqueInput
  }


  /**
   * PageViewSource base type for findFirst actions
   */
  export type PageViewSourceFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * Filter, which PageViewSource to fetch.
     */
    where?: PageViewSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViewSources to fetch.
     */
    orderBy?: Enumerable<PageViewSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageViewSources.
     */
    cursor?: PageViewSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViewSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViewSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageViewSources.
     */
    distinct?: Enumerable<PageViewSourceScalarFieldEnum>
  }

  /**
   * PageViewSource findFirst
   */
  export interface PageViewSourceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PageViewSourceFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PageViewSource findFirstOrThrow
   */
  export type PageViewSourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * Filter, which PageViewSource to fetch.
     */
    where?: PageViewSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViewSources to fetch.
     */
    orderBy?: Enumerable<PageViewSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageViewSources.
     */
    cursor?: PageViewSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViewSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViewSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageViewSources.
     */
    distinct?: Enumerable<PageViewSourceScalarFieldEnum>
  }


  /**
   * PageViewSource findMany
   */
  export type PageViewSourceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * Filter, which PageViewSources to fetch.
     */
    where?: PageViewSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViewSources to fetch.
     */
    orderBy?: Enumerable<PageViewSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PageViewSources.
     */
    cursor?: PageViewSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViewSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViewSources.
     */
    skip?: number
    distinct?: Enumerable<PageViewSourceScalarFieldEnum>
  }


  /**
   * PageViewSource create
   */
  export type PageViewSourceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * The data needed to create a PageViewSource.
     */
    data: XOR<PageViewSourceCreateInput, PageViewSourceUncheckedCreateInput>
  }


  /**
   * PageViewSource createMany
   */
  export type PageViewSourceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PageViewSources.
     */
    data: Enumerable<PageViewSourceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PageViewSource update
   */
  export type PageViewSourceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * The data needed to update a PageViewSource.
     */
    data: XOR<PageViewSourceUpdateInput, PageViewSourceUncheckedUpdateInput>
    /**
     * Choose, which PageViewSource to update.
     */
    where: PageViewSourceWhereUniqueInput
  }


  /**
   * PageViewSource updateMany
   */
  export type PageViewSourceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PageViewSources.
     */
    data: XOR<PageViewSourceUpdateManyMutationInput, PageViewSourceUncheckedUpdateManyInput>
    /**
     * Filter which PageViewSources to update
     */
    where?: PageViewSourceWhereInput
  }


  /**
   * PageViewSource upsert
   */
  export type PageViewSourceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * The filter to search for the PageViewSource to update in case it exists.
     */
    where: PageViewSourceWhereUniqueInput
    /**
     * In case the PageViewSource found by the `where` argument doesn't exist, create a new PageViewSource with this data.
     */
    create: XOR<PageViewSourceCreateInput, PageViewSourceUncheckedCreateInput>
    /**
     * In case the PageViewSource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageViewSourceUpdateInput, PageViewSourceUncheckedUpdateInput>
  }


  /**
   * PageViewSource delete
   */
  export type PageViewSourceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
    /**
     * Filter which PageViewSource to delete.
     */
    where: PageViewSourceWhereUniqueInput
  }


  /**
   * PageViewSource deleteMany
   */
  export type PageViewSourceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageViewSources to delete
     */
    where?: PageViewSourceWhereInput
  }


  /**
   * PageViewSource without action
   */
  export type PageViewSourceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViewSource
     */
    select?: PageViewSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PageViewSourceInclude<ExtArgs> | null
  }



  /**
   * Model Logs
   */


  export type AggregateLogs = {
    _count: LogsCountAggregateOutputType | null
    _avg: LogsAvgAggregateOutputType | null
    _sum: LogsSumAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  export type LogsAvgAggregateOutputType = {
    id: number | null
  }

  export type LogsSumAggregateOutputType = {
    id: number | null
  }

  export type LogsMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    message: string | null
    level: string | null
  }

  export type LogsMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    message: string | null
    level: string | null
  }

  export type LogsCountAggregateOutputType = {
    id: number
    createdAt: number
    message: number
    level: number
    _all: number
  }


  export type LogsAvgAggregateInputType = {
    id?: true
  }

  export type LogsSumAggregateInputType = {
    id?: true
  }

  export type LogsMinAggregateInputType = {
    id?: true
    createdAt?: true
    message?: true
    level?: true
  }

  export type LogsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    message?: true
    level?: true
  }

  export type LogsCountAggregateInputType = {
    id?: true
    createdAt?: true
    message?: true
    level?: true
    _all?: true
  }

  export type LogsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to aggregate.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogsMaxAggregateInputType
  }

  export type GetLogsAggregateType<T extends LogsAggregateArgs> = {
        [P in keyof T & keyof AggregateLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogs[P]>
      : GetScalarType<T[P], AggregateLogs[P]>
  }




  export type LogsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LogsWhereInput
    orderBy?: Enumerable<LogsOrderByWithAggregationInput>
    by: LogsScalarFieldEnum[]
    having?: LogsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogsCountAggregateInputType | true
    _avg?: LogsAvgAggregateInputType
    _sum?: LogsSumAggregateInputType
    _min?: LogsMinAggregateInputType
    _max?: LogsMaxAggregateInputType
  }


  export type LogsGroupByOutputType = {
    id: number
    createdAt: Date
    message: string
    level: string
    _count: LogsCountAggregateOutputType | null
    _avg: LogsAvgAggregateOutputType | null
    _sum: LogsSumAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  type GetLogsGroupByPayload<T extends LogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogsGroupByOutputType[P]>
            : GetScalarType<T[P], LogsGroupByOutputType[P]>
        }
      >
    >


  export type LogsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    message?: boolean
    level?: boolean
  }, ExtArgs["result"]["logs"]>

  export type LogsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    message?: boolean
    level?: boolean
  }


  type LogsGetPayload<S extends boolean | null | undefined | LogsArgs> = $Types.GetResult<LogsPayload, S>

  type LogsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LogsFindManyArgs, 'select' | 'include'> & {
      select?: LogsCountAggregateInputType | true
    }

  export interface LogsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Logs'], meta: { name: 'Logs' } }
    /**
     * Find zero or one Logs that matches the filter.
     * @param {LogsFindUniqueArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LogsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Logs'> extends True ? Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Logs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LogsFindUniqueOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LogsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsFindFirstArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LogsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Logs'> extends True ? Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Logs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsFindFirstOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LogsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.logs.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.logs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logsWithIdOnly = await prisma.logs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LogsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<LogsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Logs.
     * @param {LogsCreateArgs} args - Arguments to create a Logs.
     * @example
     * // Create one Logs
     * const Logs = await prisma.logs.create({
     *   data: {
     *     // ... data to create a Logs
     *   }
     * })
     * 
    **/
    create<T extends LogsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LogsCreateArgs<ExtArgs>>
    ): Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Logs.
     *     @param {LogsCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const logs = await prisma.logs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LogsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Logs.
     * @param {LogsDeleteArgs} args - Arguments to delete one Logs.
     * @example
     * // Delete one Logs
     * const Logs = await prisma.logs.delete({
     *   where: {
     *     // ... filter to delete one Logs
     *   }
     * })
     * 
    **/
    delete<T extends LogsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LogsDeleteArgs<ExtArgs>>
    ): Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Logs.
     * @param {LogsUpdateArgs} args - Arguments to update one Logs.
     * @example
     * // Update one Logs
     * const logs = await prisma.logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LogsUpdateArgs<ExtArgs>>
    ): Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {LogsDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const logs = await prisma.logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LogsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Logs.
     * @param {LogsUpsertArgs} args - Arguments to update or create a Logs.
     * @example
     * // Update or create a Logs
     * const logs = await prisma.logs.upsert({
     *   create: {
     *     // ... data to create a Logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logs we want to update
     *   }
     * })
    **/
    upsert<T extends LogsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LogsUpsertArgs<ExtArgs>>
    ): Prisma__LogsClient<$Types.GetResult<LogsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.logs.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogsCountArgs>(
      args?: Subset<T, LogsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogsAggregateArgs>(args: Subset<T, LogsAggregateArgs>): Prisma.PrismaPromise<GetLogsAggregateType<T>>

    /**
     * Group by Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogsGroupByArgs['orderBy'] }
        : { orderBy?: LogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LogsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Logs base type for findUnique actions
   */
  export type LogsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where: LogsWhereUniqueInput
  }

  /**
   * Logs findUnique
   */
  export interface LogsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LogsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Logs findUniqueOrThrow
   */
  export type LogsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs base type for findFirst actions
   */
  export type LogsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: Enumerable<LogsScalarFieldEnum>
  }

  /**
   * Logs findFirst
   */
  export interface LogsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LogsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Logs findFirstOrThrow
   */
  export type LogsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: Enumerable<LogsScalarFieldEnum>
  }


  /**
   * Logs findMany
   */
  export type LogsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: Enumerable<LogsScalarFieldEnum>
  }


  /**
   * Logs create
   */
  export type LogsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * The data needed to create a Logs.
     */
    data: XOR<LogsCreateInput, LogsUncheckedCreateInput>
  }


  /**
   * Logs createMany
   */
  export type LogsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: Enumerable<LogsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Logs update
   */
  export type LogsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * The data needed to update a Logs.
     */
    data: XOR<LogsUpdateInput, LogsUncheckedUpdateInput>
    /**
     * Choose, which Logs to update.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs updateMany
   */
  export type LogsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogsUpdateManyMutationInput, LogsUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogsWhereInput
  }


  /**
   * Logs upsert
   */
  export type LogsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * The filter to search for the Logs to update in case it exists.
     */
    where: LogsWhereUniqueInput
    /**
     * In case the Logs found by the `where` argument doesn't exist, create a new Logs with this data.
     */
    create: XOR<LogsCreateInput, LogsUncheckedCreateInput>
    /**
     * In case the Logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogsUpdateInput, LogsUncheckedUpdateInput>
  }


  /**
   * Logs delete
   */
  export type LogsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Filter which Logs to delete.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs deleteMany
   */
  export type LogsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogsWhereInput
  }


  /**
   * Logs without action
   */
  export type LogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
  }



  /**
   * Model Auth
   */


  export type AggregateAuth = {
    _count: AuthCountAggregateOutputType | null
    _avg: AuthAvgAggregateOutputType | null
    _sum: AuthSumAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  export type AuthAvgAggregateOutputType = {
    userId: number | null
  }

  export type AuthSumAggregateOutputType = {
    userId: number | null
  }

  export type AuthMinAggregateOutputType = {
    id: string | null
    userId: number | null
  }

  export type AuthMaxAggregateOutputType = {
    id: string | null
    userId: number | null
  }

  export type AuthCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type AuthAvgAggregateInputType = {
    userId?: true
  }

  export type AuthSumAggregateInputType = {
    userId?: true
  }

  export type AuthMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AuthMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AuthCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type AuthAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auth to aggregate.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: Enumerable<AuthOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auths
    **/
    _count?: true | AuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthMaxAggregateInputType
  }

  export type GetAuthAggregateType<T extends AuthAggregateArgs> = {
        [P in keyof T & keyof AggregateAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuth[P]>
      : GetScalarType<T[P], AggregateAuth[P]>
  }




  export type AuthGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthWhereInput
    orderBy?: Enumerable<AuthOrderByWithAggregationInput>
    by: AuthScalarFieldEnum[]
    having?: AuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthCountAggregateInputType | true
    _avg?: AuthAvgAggregateInputType
    _sum?: AuthSumAggregateInputType
    _min?: AuthMinAggregateInputType
    _max?: AuthMaxAggregateInputType
  }


  export type AuthGroupByOutputType = {
    id: string
    userId: number | null
    _count: AuthCountAggregateOutputType | null
    _avg: AuthAvgAggregateOutputType | null
    _sum: AuthSumAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  type GetAuthGroupByPayload<T extends AuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthGroupByOutputType[P]>
            : GetScalarType<T[P], AuthGroupByOutputType[P]>
        }
      >
    >


  export type AuthSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    identities?: boolean | Auth$identitiesArgs<ExtArgs>
    sessions?: boolean | Auth$sessionsArgs<ExtArgs>
    _count?: boolean | AuthCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["auth"]>

  export type AuthSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type AuthInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    identities?: boolean | Auth$identitiesArgs<ExtArgs>
    sessions?: boolean | Auth$sessionsArgs<ExtArgs>
    _count?: boolean | AuthCountOutputTypeArgs<ExtArgs>
  }


  type AuthGetPayload<S extends boolean | null | undefined | AuthArgs> = $Types.GetResult<AuthPayload, S>

  type AuthCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuthFindManyArgs, 'select' | 'include'> & {
      select?: AuthCountAggregateInputType | true
    }

  export interface AuthDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auth'], meta: { name: 'Auth' } }
    /**
     * Find zero or one Auth that matches the filter.
     * @param {AuthFindUniqueArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuthFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Auth'> extends True ? Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Auth that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuthFindUniqueOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuthFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Auth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindFirstArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuthFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Auth'> extends True ? Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Auth that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindFirstOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuthFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Auths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auths
     * const auths = await prisma.auth.findMany()
     * 
     * // Get first 10 Auths
     * const auths = await prisma.auth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authWithIdOnly = await prisma.auth.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuthFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Auth.
     * @param {AuthCreateArgs} args - Arguments to create a Auth.
     * @example
     * // Create one Auth
     * const Auth = await prisma.auth.create({
     *   data: {
     *     // ... data to create a Auth
     *   }
     * })
     * 
    **/
    create<T extends AuthCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthCreateArgs<ExtArgs>>
    ): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Auths.
     *     @param {AuthCreateManyArgs} args - Arguments to create many Auths.
     *     @example
     *     // Create many Auths
     *     const auth = await prisma.auth.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuthCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Auth.
     * @param {AuthDeleteArgs} args - Arguments to delete one Auth.
     * @example
     * // Delete one Auth
     * const Auth = await prisma.auth.delete({
     *   where: {
     *     // ... filter to delete one Auth
     *   }
     * })
     * 
    **/
    delete<T extends AuthDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuthDeleteArgs<ExtArgs>>
    ): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Auth.
     * @param {AuthUpdateArgs} args - Arguments to update one Auth.
     * @example
     * // Update one Auth
     * const auth = await prisma.auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthUpdateArgs<ExtArgs>>
    ): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Auths.
     * @param {AuthDeleteManyArgs} args - Arguments to filter Auths to delete.
     * @example
     * // Delete a few Auths
     * const { count } = await prisma.auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auths
     * const auth = await prisma.auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuthUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auth.
     * @param {AuthUpsertArgs} args - Arguments to update or create a Auth.
     * @example
     * // Update or create a Auth
     * const auth = await prisma.auth.upsert({
     *   create: {
     *     // ... data to create a Auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auth we want to update
     *   }
     * })
    **/
    upsert<T extends AuthUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuthUpsertArgs<ExtArgs>>
    ): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthCountArgs} args - Arguments to filter Auths to count.
     * @example
     * // Count the number of Auths
     * const count = await prisma.auth.count({
     *   where: {
     *     // ... the filter for the Auths we want to count
     *   }
     * })
    **/
    count<T extends AuthCountArgs>(
      args?: Subset<T, AuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthAggregateArgs>(args: Subset<T, AuthAggregateArgs>): Prisma.PrismaPromise<GetAuthAggregateType<T>>

    /**
     * Group by Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthGroupByArgs['orderBy'] }
        : { orderBy?: AuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuthClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    identities<T extends Auth$identitiesArgs<ExtArgs> = {}>(args?: Subset<T, Auth$identitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findMany', never>| Null>;

    sessions<T extends Auth$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Auth$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Auth base type for findUnique actions
   */
  export type AuthFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth findUnique
   */
  export interface AuthFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuthFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Auth findUniqueOrThrow
   */
  export type AuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where: AuthWhereUniqueInput
  }


  /**
   * Auth base type for findFirst actions
   */
  export type AuthFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: Enumerable<AuthOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: Enumerable<AuthScalarFieldEnum>
  }

  /**
   * Auth findFirst
   */
  export interface AuthFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuthFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Auth findFirstOrThrow
   */
  export type AuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: Enumerable<AuthOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: Enumerable<AuthScalarFieldEnum>
  }


  /**
   * Auth findMany
   */
  export type AuthFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: Enumerable<AuthOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    distinct?: Enumerable<AuthScalarFieldEnum>
  }


  /**
   * Auth create
   */
  export type AuthCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * The data needed to create a Auth.
     */
    data?: XOR<AuthCreateInput, AuthUncheckedCreateInput>
  }


  /**
   * Auth createMany
   */
  export type AuthCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auths.
     */
    data: Enumerable<AuthCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Auth update
   */
  export type AuthUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * The data needed to update a Auth.
     */
    data: XOR<AuthUpdateInput, AuthUncheckedUpdateInput>
    /**
     * Choose, which Auth to update.
     */
    where: AuthWhereUniqueInput
  }


  /**
   * Auth updateMany
   */
  export type AuthUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auths.
     */
    data: XOR<AuthUpdateManyMutationInput, AuthUncheckedUpdateManyInput>
    /**
     * Filter which Auths to update
     */
    where?: AuthWhereInput
  }


  /**
   * Auth upsert
   */
  export type AuthUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * The filter to search for the Auth to update in case it exists.
     */
    where: AuthWhereUniqueInput
    /**
     * In case the Auth found by the `where` argument doesn't exist, create a new Auth with this data.
     */
    create: XOR<AuthCreateInput, AuthUncheckedCreateInput>
    /**
     * In case the Auth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthUpdateInput, AuthUncheckedUpdateInput>
  }


  /**
   * Auth delete
   */
  export type AuthDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter which Auth to delete.
     */
    where: AuthWhereUniqueInput
  }


  /**
   * Auth deleteMany
   */
  export type AuthDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auths to delete
     */
    where?: AuthWhereInput
  }


  /**
   * Auth.identities
   */
  export type Auth$identitiesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    where?: AuthIdentityWhereInput
    orderBy?: Enumerable<AuthIdentityOrderByWithRelationInput>
    cursor?: AuthIdentityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AuthIdentityScalarFieldEnum>
  }


  /**
   * Auth.sessions
   */
  export type Auth$sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Auth without action
   */
  export type AuthArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthInclude<ExtArgs> | null
  }



  /**
   * Model AuthIdentity
   */


  export type AggregateAuthIdentity = {
    _count: AuthIdentityCountAggregateOutputType | null
    _min: AuthIdentityMinAggregateOutputType | null
    _max: AuthIdentityMaxAggregateOutputType | null
  }

  export type AuthIdentityMinAggregateOutputType = {
    providerName: string | null
    providerUserId: string | null
    providerData: string | null
    authId: string | null
  }

  export type AuthIdentityMaxAggregateOutputType = {
    providerName: string | null
    providerUserId: string | null
    providerData: string | null
    authId: string | null
  }

  export type AuthIdentityCountAggregateOutputType = {
    providerName: number
    providerUserId: number
    providerData: number
    authId: number
    _all: number
  }


  export type AuthIdentityMinAggregateInputType = {
    providerName?: true
    providerUserId?: true
    providerData?: true
    authId?: true
  }

  export type AuthIdentityMaxAggregateInputType = {
    providerName?: true
    providerUserId?: true
    providerData?: true
    authId?: true
  }

  export type AuthIdentityCountAggregateInputType = {
    providerName?: true
    providerUserId?: true
    providerData?: true
    authId?: true
    _all?: true
  }

  export type AuthIdentityAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthIdentity to aggregate.
     */
    where?: AuthIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthIdentities to fetch.
     */
    orderBy?: Enumerable<AuthIdentityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthIdentities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthIdentities
    **/
    _count?: true | AuthIdentityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthIdentityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthIdentityMaxAggregateInputType
  }

  export type GetAuthIdentityAggregateType<T extends AuthIdentityAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthIdentity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthIdentity[P]>
      : GetScalarType<T[P], AggregateAuthIdentity[P]>
  }




  export type AuthIdentityGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthIdentityWhereInput
    orderBy?: Enumerable<AuthIdentityOrderByWithAggregationInput>
    by: AuthIdentityScalarFieldEnum[]
    having?: AuthIdentityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthIdentityCountAggregateInputType | true
    _min?: AuthIdentityMinAggregateInputType
    _max?: AuthIdentityMaxAggregateInputType
  }


  export type AuthIdentityGroupByOutputType = {
    providerName: string
    providerUserId: string
    providerData: string
    authId: string
    _count: AuthIdentityCountAggregateOutputType | null
    _min: AuthIdentityMinAggregateOutputType | null
    _max: AuthIdentityMaxAggregateOutputType | null
  }

  type GetAuthIdentityGroupByPayload<T extends AuthIdentityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuthIdentityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthIdentityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthIdentityGroupByOutputType[P]>
            : GetScalarType<T[P], AuthIdentityGroupByOutputType[P]>
        }
      >
    >


  export type AuthIdentitySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    providerName?: boolean
    providerUserId?: boolean
    providerData?: boolean
    authId?: boolean
    auth?: boolean | AuthArgs<ExtArgs>
  }, ExtArgs["result"]["authIdentity"]>

  export type AuthIdentitySelectScalar = {
    providerName?: boolean
    providerUserId?: boolean
    providerData?: boolean
    authId?: boolean
  }

  export type AuthIdentityInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    auth?: boolean | AuthArgs<ExtArgs>
  }


  type AuthIdentityGetPayload<S extends boolean | null | undefined | AuthIdentityArgs> = $Types.GetResult<AuthIdentityPayload, S>

  type AuthIdentityCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuthIdentityFindManyArgs, 'select' | 'include'> & {
      select?: AuthIdentityCountAggregateInputType | true
    }

  export interface AuthIdentityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthIdentity'], meta: { name: 'AuthIdentity' } }
    /**
     * Find zero or one AuthIdentity that matches the filter.
     * @param {AuthIdentityFindUniqueArgs} args - Arguments to find a AuthIdentity
     * @example
     * // Get one AuthIdentity
     * const authIdentity = await prisma.authIdentity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthIdentityFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuthIdentityFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AuthIdentity'> extends True ? Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AuthIdentity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuthIdentityFindUniqueOrThrowArgs} args - Arguments to find a AuthIdentity
     * @example
     * // Get one AuthIdentity
     * const authIdentity = await prisma.authIdentity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuthIdentityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthIdentityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AuthIdentity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityFindFirstArgs} args - Arguments to find a AuthIdentity
     * @example
     * // Get one AuthIdentity
     * const authIdentity = await prisma.authIdentity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthIdentityFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuthIdentityFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AuthIdentity'> extends True ? Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AuthIdentity that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityFindFirstOrThrowArgs} args - Arguments to find a AuthIdentity
     * @example
     * // Get one AuthIdentity
     * const authIdentity = await prisma.authIdentity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuthIdentityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthIdentityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AuthIdentities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthIdentities
     * const authIdentities = await prisma.authIdentity.findMany()
     * 
     * // Get first 10 AuthIdentities
     * const authIdentities = await prisma.authIdentity.findMany({ take: 10 })
     * 
     * // Only select the `providerName`
     * const authIdentityWithProviderNameOnly = await prisma.authIdentity.findMany({ select: { providerName: true } })
     * 
    **/
    findMany<T extends AuthIdentityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthIdentityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AuthIdentity.
     * @param {AuthIdentityCreateArgs} args - Arguments to create a AuthIdentity.
     * @example
     * // Create one AuthIdentity
     * const AuthIdentity = await prisma.authIdentity.create({
     *   data: {
     *     // ... data to create a AuthIdentity
     *   }
     * })
     * 
    **/
    create<T extends AuthIdentityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthIdentityCreateArgs<ExtArgs>>
    ): Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AuthIdentities.
     *     @param {AuthIdentityCreateManyArgs} args - Arguments to create many AuthIdentities.
     *     @example
     *     // Create many AuthIdentities
     *     const authIdentity = await prisma.authIdentity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuthIdentityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthIdentityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthIdentity.
     * @param {AuthIdentityDeleteArgs} args - Arguments to delete one AuthIdentity.
     * @example
     * // Delete one AuthIdentity
     * const AuthIdentity = await prisma.authIdentity.delete({
     *   where: {
     *     // ... filter to delete one AuthIdentity
     *   }
     * })
     * 
    **/
    delete<T extends AuthIdentityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuthIdentityDeleteArgs<ExtArgs>>
    ): Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AuthIdentity.
     * @param {AuthIdentityUpdateArgs} args - Arguments to update one AuthIdentity.
     * @example
     * // Update one AuthIdentity
     * const authIdentity = await prisma.authIdentity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthIdentityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthIdentityUpdateArgs<ExtArgs>>
    ): Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AuthIdentities.
     * @param {AuthIdentityDeleteManyArgs} args - Arguments to filter AuthIdentities to delete.
     * @example
     * // Delete a few AuthIdentities
     * const { count } = await prisma.authIdentity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthIdentityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthIdentityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthIdentities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthIdentities
     * const authIdentity = await prisma.authIdentity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthIdentityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuthIdentityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthIdentity.
     * @param {AuthIdentityUpsertArgs} args - Arguments to update or create a AuthIdentity.
     * @example
     * // Update or create a AuthIdentity
     * const authIdentity = await prisma.authIdentity.upsert({
     *   create: {
     *     // ... data to create a AuthIdentity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthIdentity we want to update
     *   }
     * })
    **/
    upsert<T extends AuthIdentityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuthIdentityUpsertArgs<ExtArgs>>
    ): Prisma__AuthIdentityClient<$Types.GetResult<AuthIdentityPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AuthIdentities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityCountArgs} args - Arguments to filter AuthIdentities to count.
     * @example
     * // Count the number of AuthIdentities
     * const count = await prisma.authIdentity.count({
     *   where: {
     *     // ... the filter for the AuthIdentities we want to count
     *   }
     * })
    **/
    count<T extends AuthIdentityCountArgs>(
      args?: Subset<T, AuthIdentityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthIdentityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthIdentity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthIdentityAggregateArgs>(args: Subset<T, AuthIdentityAggregateArgs>): Prisma.PrismaPromise<GetAuthIdentityAggregateType<T>>

    /**
     * Group by AuthIdentity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthIdentityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthIdentityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthIdentityGroupByArgs['orderBy'] }
        : { orderBy?: AuthIdentityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthIdentityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthIdentityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthIdentity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuthIdentityClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    auth<T extends AuthArgs<ExtArgs> = {}>(args?: Subset<T, AuthArgs<ExtArgs>>): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AuthIdentity base type for findUnique actions
   */
  export type AuthIdentityFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * Filter, which AuthIdentity to fetch.
     */
    where: AuthIdentityWhereUniqueInput
  }

  /**
   * AuthIdentity findUnique
   */
  export interface AuthIdentityFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuthIdentityFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AuthIdentity findUniqueOrThrow
   */
  export type AuthIdentityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * Filter, which AuthIdentity to fetch.
     */
    where: AuthIdentityWhereUniqueInput
  }


  /**
   * AuthIdentity base type for findFirst actions
   */
  export type AuthIdentityFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * Filter, which AuthIdentity to fetch.
     */
    where?: AuthIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthIdentities to fetch.
     */
    orderBy?: Enumerable<AuthIdentityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthIdentities.
     */
    cursor?: AuthIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthIdentities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthIdentities.
     */
    distinct?: Enumerable<AuthIdentityScalarFieldEnum>
  }

  /**
   * AuthIdentity findFirst
   */
  export interface AuthIdentityFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuthIdentityFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AuthIdentity findFirstOrThrow
   */
  export type AuthIdentityFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * Filter, which AuthIdentity to fetch.
     */
    where?: AuthIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthIdentities to fetch.
     */
    orderBy?: Enumerable<AuthIdentityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthIdentities.
     */
    cursor?: AuthIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthIdentities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthIdentities.
     */
    distinct?: Enumerable<AuthIdentityScalarFieldEnum>
  }


  /**
   * AuthIdentity findMany
   */
  export type AuthIdentityFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * Filter, which AuthIdentities to fetch.
     */
    where?: AuthIdentityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthIdentities to fetch.
     */
    orderBy?: Enumerable<AuthIdentityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthIdentities.
     */
    cursor?: AuthIdentityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthIdentities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthIdentities.
     */
    skip?: number
    distinct?: Enumerable<AuthIdentityScalarFieldEnum>
  }


  /**
   * AuthIdentity create
   */
  export type AuthIdentityCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthIdentity.
     */
    data: XOR<AuthIdentityCreateInput, AuthIdentityUncheckedCreateInput>
  }


  /**
   * AuthIdentity createMany
   */
  export type AuthIdentityCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthIdentities.
     */
    data: Enumerable<AuthIdentityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AuthIdentity update
   */
  export type AuthIdentityUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthIdentity.
     */
    data: XOR<AuthIdentityUpdateInput, AuthIdentityUncheckedUpdateInput>
    /**
     * Choose, which AuthIdentity to update.
     */
    where: AuthIdentityWhereUniqueInput
  }


  /**
   * AuthIdentity updateMany
   */
  export type AuthIdentityUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthIdentities.
     */
    data: XOR<AuthIdentityUpdateManyMutationInput, AuthIdentityUncheckedUpdateManyInput>
    /**
     * Filter which AuthIdentities to update
     */
    where?: AuthIdentityWhereInput
  }


  /**
   * AuthIdentity upsert
   */
  export type AuthIdentityUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthIdentity to update in case it exists.
     */
    where: AuthIdentityWhereUniqueInput
    /**
     * In case the AuthIdentity found by the `where` argument doesn't exist, create a new AuthIdentity with this data.
     */
    create: XOR<AuthIdentityCreateInput, AuthIdentityUncheckedCreateInput>
    /**
     * In case the AuthIdentity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthIdentityUpdateInput, AuthIdentityUncheckedUpdateInput>
  }


  /**
   * AuthIdentity delete
   */
  export type AuthIdentityDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
    /**
     * Filter which AuthIdentity to delete.
     */
    where: AuthIdentityWhereUniqueInput
  }


  /**
   * AuthIdentity deleteMany
   */
  export type AuthIdentityDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthIdentities to delete
     */
    where?: AuthIdentityWhereInput
  }


  /**
   * AuthIdentity without action
   */
  export type AuthIdentityArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthIdentity
     */
    select?: AuthIdentitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthIdentityInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    userId?: boolean
    auth?: boolean | AuthArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    userId?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    auth?: boolean | AuthArgs<ExtArgs>
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    auth<T extends AuthArgs<ExtArgs> = {}>(args?: Subset<T, AuthArgs<ExtArgs>>): Prisma__AuthClient<$Types.GetResult<AuthPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    createdAt: 'createdAt',
    lastActiveTimestamp: 'lastActiveTimestamp',
    isAdmin: 'isAdmin',
    stripeId: 'stripeId',
    checkoutSessionId: 'checkoutSessionId',
    subscriptionTier: 'subscriptionTier',
    subscriptionStatus: 'subscriptionStatus',
    sendEmail: 'sendEmail',
    datePaid: 'datePaid',
    credits: 'credits'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GptResponseScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GptResponseScalarFieldEnum = (typeof GptResponseScalarFieldEnum)[keyof typeof GptResponseScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    description: 'description',
    time: 'time',
    isDone: 'isDone',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    key: 'key',
    uploadUrl: 'uploadUrl',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const ContactFormMessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    createdAt: 'createdAt',
    isRead: 'isRead',
    repliedAt: 'repliedAt'
  };

  export type ContactFormMessageScalarFieldEnum = (typeof ContactFormMessageScalarFieldEnum)[keyof typeof ContactFormMessageScalarFieldEnum]


  export const DailyStatsScalarFieldEnum: {
    id: 'id',
    date: 'date',
    totalViews: 'totalViews',
    prevDayViewsChangePercent: 'prevDayViewsChangePercent',
    userCount: 'userCount',
    paidUserCount: 'paidUserCount',
    userDelta: 'userDelta',
    paidUserDelta: 'paidUserDelta',
    totalRevenue: 'totalRevenue',
    totalProfit: 'totalProfit'
  };

  export type DailyStatsScalarFieldEnum = (typeof DailyStatsScalarFieldEnum)[keyof typeof DailyStatsScalarFieldEnum]


  export const PageViewSourceScalarFieldEnum: {
    date: 'date',
    name: 'name',
    visitors: 'visitors',
    dailyStatsId: 'dailyStatsId'
  };

  export type PageViewSourceScalarFieldEnum = (typeof PageViewSourceScalarFieldEnum)[keyof typeof PageViewSourceScalarFieldEnum]


  export const LogsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    message: 'message',
    level: 'level'
  };

  export type LogsScalarFieldEnum = (typeof LogsScalarFieldEnum)[keyof typeof LogsScalarFieldEnum]


  export const AuthScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type AuthScalarFieldEnum = (typeof AuthScalarFieldEnum)[keyof typeof AuthScalarFieldEnum]


  export const AuthIdentityScalarFieldEnum: {
    providerName: 'providerName',
    providerUserId: 'providerUserId',
    providerData: 'providerData',
    authId: 'authId'
  };

  export type AuthIdentityScalarFieldEnum = (typeof AuthIdentityScalarFieldEnum)[keyof typeof AuthIdentityScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    lastActiveTimestamp?: DateTimeFilter | Date | string
    isAdmin?: BoolFilter | boolean
    stripeId?: StringNullableFilter | string | null
    checkoutSessionId?: StringNullableFilter | string | null
    subscriptionTier?: StringNullableFilter | string | null
    subscriptionStatus?: StringNullableFilter | string | null
    sendEmail?: BoolFilter | boolean
    datePaid?: DateTimeNullableFilter | Date | string | null
    credits?: IntFilter | number
    gptResponses?: GptResponseListRelationFilter
    contactFormMessages?: ContactFormMessageListRelationFilter
    tasks?: TaskListRelationFilter
    files?: FileListRelationFilter
    auth?: XOR<AuthRelationFilter, AuthWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastActiveTimestamp?: SortOrder
    isAdmin?: SortOrder
    stripeId?: SortOrderInput | SortOrder
    checkoutSessionId?: SortOrderInput | SortOrder
    subscriptionTier?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrderInput | SortOrder
    sendEmail?: SortOrder
    datePaid?: SortOrderInput | SortOrder
    credits?: SortOrder
    gptResponses?: GptResponseOrderByRelationAggregateInput
    contactFormMessages?: ContactFormMessageOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    auth?: AuthOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastActiveTimestamp?: SortOrder
    isAdmin?: SortOrder
    stripeId?: SortOrderInput | SortOrder
    checkoutSessionId?: SortOrderInput | SortOrder
    subscriptionTier?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrderInput | SortOrder
    sendEmail?: SortOrder
    datePaid?: SortOrderInput | SortOrder
    credits?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    lastActiveTimestamp?: DateTimeWithAggregatesFilter | Date | string
    isAdmin?: BoolWithAggregatesFilter | boolean
    stripeId?: StringNullableWithAggregatesFilter | string | null
    checkoutSessionId?: StringNullableWithAggregatesFilter | string | null
    subscriptionTier?: StringNullableWithAggregatesFilter | string | null
    subscriptionStatus?: StringNullableWithAggregatesFilter | string | null
    sendEmail?: BoolWithAggregatesFilter | boolean
    datePaid?: DateTimeNullableWithAggregatesFilter | Date | string | null
    credits?: IntWithAggregatesFilter | number
  }

  export type GptResponseWhereInput = {
    AND?: Enumerable<GptResponseWhereInput>
    OR?: Enumerable<GptResponseWhereInput>
    NOT?: Enumerable<GptResponseWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GptResponseOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GptResponseWhereUniqueInput = {
    id?: string
  }

  export type GptResponseOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GptResponseCountOrderByAggregateInput
    _avg?: GptResponseAvgOrderByAggregateInput
    _max?: GptResponseMaxOrderByAggregateInput
    _min?: GptResponseMinOrderByAggregateInput
    _sum?: GptResponseSumOrderByAggregateInput
  }

  export type GptResponseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GptResponseScalarWhereWithAggregatesInput>
    OR?: Enumerable<GptResponseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GptResponseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TaskWhereInput = {
    AND?: Enumerable<TaskWhereInput>
    OR?: Enumerable<TaskWhereInput>
    NOT?: Enumerable<TaskWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    time?: StringFilter | string
    isDone?: BoolFilter | boolean
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    time?: SortOrder
    isDone?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = {
    id?: string
  }

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    time?: SortOrder
    isDone?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TaskScalarWhereWithAggregatesInput>
    OR?: Enumerable<TaskScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TaskScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    time?: StringWithAggregatesFilter | string
    isDone?: BoolWithAggregatesFilter | boolean
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FileWhereInput = {
    AND?: Enumerable<FileWhereInput>
    OR?: Enumerable<FileWhereInput>
    NOT?: Enumerable<FileWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    type?: StringFilter | string
    key?: StringFilter | string
    uploadUrl?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    key?: SortOrder
    uploadUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = {
    id?: string
  }

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    key?: SortOrder
    uploadUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FileScalarWhereWithAggregatesInput>
    OR?: Enumerable<FileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    key?: StringWithAggregatesFilter | string
    uploadUrl?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ContactFormMessageWhereInput = {
    AND?: Enumerable<ContactFormMessageWhereInput>
    OR?: Enumerable<ContactFormMessageWhereInput>
    NOT?: Enumerable<ContactFormMessageWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    isRead?: BoolFilter | boolean
    repliedAt?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ContactFormMessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    repliedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ContactFormMessageWhereUniqueInput = {
    id?: string
  }

  export type ContactFormMessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    repliedAt?: SortOrderInput | SortOrder
    _count?: ContactFormMessageCountOrderByAggregateInput
    _avg?: ContactFormMessageAvgOrderByAggregateInput
    _max?: ContactFormMessageMaxOrderByAggregateInput
    _min?: ContactFormMessageMinOrderByAggregateInput
    _sum?: ContactFormMessageSumOrderByAggregateInput
  }

  export type ContactFormMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactFormMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactFormMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactFormMessageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    isRead?: BoolWithAggregatesFilter | boolean
    repliedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type DailyStatsWhereInput = {
    AND?: Enumerable<DailyStatsWhereInput>
    OR?: Enumerable<DailyStatsWhereInput>
    NOT?: Enumerable<DailyStatsWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    totalViews?: IntFilter | number
    prevDayViewsChangePercent?: StringFilter | string
    userCount?: IntFilter | number
    paidUserCount?: IntFilter | number
    userDelta?: IntFilter | number
    paidUserDelta?: IntFilter | number
    totalRevenue?: FloatFilter | number
    totalProfit?: FloatFilter | number
    sources?: PageViewSourceListRelationFilter
  }

  export type DailyStatsOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    totalViews?: SortOrder
    prevDayViewsChangePercent?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
    sources?: PageViewSourceOrderByRelationAggregateInput
  }

  export type DailyStatsWhereUniqueInput = {
    id?: number
    date?: Date | string
  }

  export type DailyStatsOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    totalViews?: SortOrder
    prevDayViewsChangePercent?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
    _count?: DailyStatsCountOrderByAggregateInput
    _avg?: DailyStatsAvgOrderByAggregateInput
    _max?: DailyStatsMaxOrderByAggregateInput
    _min?: DailyStatsMinOrderByAggregateInput
    _sum?: DailyStatsSumOrderByAggregateInput
  }

  export type DailyStatsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DailyStatsScalarWhereWithAggregatesInput>
    OR?: Enumerable<DailyStatsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DailyStatsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    totalViews?: IntWithAggregatesFilter | number
    prevDayViewsChangePercent?: StringWithAggregatesFilter | string
    userCount?: IntWithAggregatesFilter | number
    paidUserCount?: IntWithAggregatesFilter | number
    userDelta?: IntWithAggregatesFilter | number
    paidUserDelta?: IntWithAggregatesFilter | number
    totalRevenue?: FloatWithAggregatesFilter | number
    totalProfit?: FloatWithAggregatesFilter | number
  }

  export type PageViewSourceWhereInput = {
    AND?: Enumerable<PageViewSourceWhereInput>
    OR?: Enumerable<PageViewSourceWhereInput>
    NOT?: Enumerable<PageViewSourceWhereInput>
    date?: DateTimeFilter | Date | string
    name?: StringFilter | string
    visitors?: IntFilter | number
    dailyStatsId?: IntNullableFilter | number | null
    dailyStats?: XOR<DailyStatsRelationFilter, DailyStatsWhereInput> | null
  }

  export type PageViewSourceOrderByWithRelationInput = {
    date?: SortOrder
    name?: SortOrder
    visitors?: SortOrder
    dailyStatsId?: SortOrderInput | SortOrder
    dailyStats?: DailyStatsOrderByWithRelationInput
  }

  export type PageViewSourceWhereUniqueInput = {
    date_name?: PageViewSourceDateNameCompoundUniqueInput
  }

  export type PageViewSourceOrderByWithAggregationInput = {
    date?: SortOrder
    name?: SortOrder
    visitors?: SortOrder
    dailyStatsId?: SortOrderInput | SortOrder
    _count?: PageViewSourceCountOrderByAggregateInput
    _avg?: PageViewSourceAvgOrderByAggregateInput
    _max?: PageViewSourceMaxOrderByAggregateInput
    _min?: PageViewSourceMinOrderByAggregateInput
    _sum?: PageViewSourceSumOrderByAggregateInput
  }

  export type PageViewSourceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PageViewSourceScalarWhereWithAggregatesInput>
    OR?: Enumerable<PageViewSourceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PageViewSourceScalarWhereWithAggregatesInput>
    date?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    visitors?: IntWithAggregatesFilter | number
    dailyStatsId?: IntNullableWithAggregatesFilter | number | null
  }

  export type LogsWhereInput = {
    AND?: Enumerable<LogsWhereInput>
    OR?: Enumerable<LogsWhereInput>
    NOT?: Enumerable<LogsWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    message?: StringFilter | string
    level?: StringFilter | string
  }

  export type LogsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
    level?: SortOrder
  }

  export type LogsWhereUniqueInput = {
    id?: number
  }

  export type LogsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
    level?: SortOrder
    _count?: LogsCountOrderByAggregateInput
    _avg?: LogsAvgOrderByAggregateInput
    _max?: LogsMaxOrderByAggregateInput
    _min?: LogsMinOrderByAggregateInput
    _sum?: LogsSumOrderByAggregateInput
  }

  export type LogsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LogsScalarWhereWithAggregatesInput>
    OR?: Enumerable<LogsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LogsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    message?: StringWithAggregatesFilter | string
    level?: StringWithAggregatesFilter | string
  }

  export type AuthWhereInput = {
    AND?: Enumerable<AuthWhereInput>
    OR?: Enumerable<AuthWhereInput>
    NOT?: Enumerable<AuthWhereInput>
    id?: StringFilter | string
    userId?: IntNullableFilter | number | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    identities?: AuthIdentityListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type AuthOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    identities?: AuthIdentityOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type AuthWhereUniqueInput = {
    id?: string
    userId?: number
  }

  export type AuthOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AuthCountOrderByAggregateInput
    _avg?: AuthAvgOrderByAggregateInput
    _max?: AuthMaxOrderByAggregateInput
    _min?: AuthMinOrderByAggregateInput
    _sum?: AuthSumOrderByAggregateInput
  }

  export type AuthScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuthScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuthScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuthScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
  }

  export type AuthIdentityWhereInput = {
    AND?: Enumerable<AuthIdentityWhereInput>
    OR?: Enumerable<AuthIdentityWhereInput>
    NOT?: Enumerable<AuthIdentityWhereInput>
    providerName?: StringFilter | string
    providerUserId?: StringFilter | string
    providerData?: StringFilter | string
    authId?: StringFilter | string
    auth?: XOR<AuthRelationFilter, AuthWhereInput>
  }

  export type AuthIdentityOrderByWithRelationInput = {
    providerName?: SortOrder
    providerUserId?: SortOrder
    providerData?: SortOrder
    authId?: SortOrder
    auth?: AuthOrderByWithRelationInput
  }

  export type AuthIdentityWhereUniqueInput = {
    providerName_providerUserId?: AuthIdentityProviderNameProviderUserIdCompoundUniqueInput
  }

  export type AuthIdentityOrderByWithAggregationInput = {
    providerName?: SortOrder
    providerUserId?: SortOrder
    providerData?: SortOrder
    authId?: SortOrder
    _count?: AuthIdentityCountOrderByAggregateInput
    _max?: AuthIdentityMaxOrderByAggregateInput
    _min?: AuthIdentityMinOrderByAggregateInput
  }

  export type AuthIdentityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuthIdentityScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuthIdentityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuthIdentityScalarWhereWithAggregatesInput>
    providerName?: StringWithAggregatesFilter | string
    providerUserId?: StringWithAggregatesFilter | string
    providerData?: StringWithAggregatesFilter | string
    authId?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    auth?: XOR<AuthRelationFilter, AuthWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
    auth?: AuthOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    expiresAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    auth?: AuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseUncheckedCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    auth?: AuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    auth?: AuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUncheckedUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    auth?: AuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
  }

  export type UserUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
  }

  export type GptResponseCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGptResponsesInput
  }

  export type GptResponseUncheckedCreateInput = {
    id?: string
    content: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GptResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGptResponsesNestedInput
  }

  export type GptResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GptResponseCreateManyInput = {
    id?: string
    content: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GptResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GptResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    description: string
    time?: string
    isDone?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    description: string
    time?: string
    isDone?: boolean
    userId: number
    createdAt?: Date | string
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyInput = {
    id?: string
    description: string
    time?: string
    isDone?: boolean
    userId: number
    createdAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    type: string
    key: string
    uploadUrl: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    key: string
    uploadUrl: string
    userId: number
    createdAt?: Date | string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    type: string
    key: string
    uploadUrl: string
    userId: number
    createdAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormMessageCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    repliedAt?: Date | string | null
    user: UserCreateNestedOneWithoutContactFormMessagesInput
  }

  export type ContactFormMessageUncheckedCreateInput = {
    id?: string
    content: string
    userId: number
    createdAt?: Date | string
    isRead?: boolean
    repliedAt?: Date | string | null
  }

  export type ContactFormMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutContactFormMessagesNestedInput
  }

  export type ContactFormMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContactFormMessageCreateManyInput = {
    id?: string
    content: string
    userId: number
    createdAt?: Date | string
    isRead?: boolean
    repliedAt?: Date | string | null
  }

  export type ContactFormMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContactFormMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DailyStatsCreateInput = {
    date?: Date | string
    totalViews?: number
    prevDayViewsChangePercent?: string
    userCount?: number
    paidUserCount?: number
    userDelta?: number
    paidUserDelta?: number
    totalRevenue?: number
    totalProfit?: number
    sources?: PageViewSourceCreateNestedManyWithoutDailyStatsInput
  }

  export type DailyStatsUncheckedCreateInput = {
    id?: number
    date?: Date | string
    totalViews?: number
    prevDayViewsChangePercent?: string
    userCount?: number
    paidUserCount?: number
    userDelta?: number
    paidUserDelta?: number
    totalRevenue?: number
    totalProfit?: number
    sources?: PageViewSourceUncheckedCreateNestedManyWithoutDailyStatsInput
  }

  export type DailyStatsUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalViews?: IntFieldUpdateOperationsInput | number
    prevDayViewsChangePercent?: StringFieldUpdateOperationsInput | string
    userCount?: IntFieldUpdateOperationsInput | number
    paidUserCount?: IntFieldUpdateOperationsInput | number
    userDelta?: IntFieldUpdateOperationsInput | number
    paidUserDelta?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    totalProfit?: FloatFieldUpdateOperationsInput | number
    sources?: PageViewSourceUpdateManyWithoutDailyStatsNestedInput
  }

  export type DailyStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalViews?: IntFieldUpdateOperationsInput | number
    prevDayViewsChangePercent?: StringFieldUpdateOperationsInput | string
    userCount?: IntFieldUpdateOperationsInput | number
    paidUserCount?: IntFieldUpdateOperationsInput | number
    userDelta?: IntFieldUpdateOperationsInput | number
    paidUserDelta?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    totalProfit?: FloatFieldUpdateOperationsInput | number
    sources?: PageViewSourceUncheckedUpdateManyWithoutDailyStatsNestedInput
  }

  export type DailyStatsCreateManyInput = {
    id?: number
    date?: Date | string
    totalViews?: number
    prevDayViewsChangePercent?: string
    userCount?: number
    paidUserCount?: number
    userDelta?: number
    paidUserDelta?: number
    totalRevenue?: number
    totalProfit?: number
  }

  export type DailyStatsUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalViews?: IntFieldUpdateOperationsInput | number
    prevDayViewsChangePercent?: StringFieldUpdateOperationsInput | string
    userCount?: IntFieldUpdateOperationsInput | number
    paidUserCount?: IntFieldUpdateOperationsInput | number
    userDelta?: IntFieldUpdateOperationsInput | number
    paidUserDelta?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    totalProfit?: FloatFieldUpdateOperationsInput | number
  }

  export type DailyStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalViews?: IntFieldUpdateOperationsInput | number
    prevDayViewsChangePercent?: StringFieldUpdateOperationsInput | string
    userCount?: IntFieldUpdateOperationsInput | number
    paidUserCount?: IntFieldUpdateOperationsInput | number
    userDelta?: IntFieldUpdateOperationsInput | number
    paidUserDelta?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    totalProfit?: FloatFieldUpdateOperationsInput | number
  }

  export type PageViewSourceCreateInput = {
    date?: Date | string
    name: string
    visitors: number
    dailyStats?: DailyStatsCreateNestedOneWithoutSourcesInput
  }

  export type PageViewSourceUncheckedCreateInput = {
    date?: Date | string
    name: string
    visitors: number
    dailyStatsId?: number | null
  }

  export type PageViewSourceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
    dailyStats?: DailyStatsUpdateOneWithoutSourcesNestedInput
  }

  export type PageViewSourceUncheckedUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
    dailyStatsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PageViewSourceCreateManyInput = {
    date?: Date | string
    name: string
    visitors: number
    dailyStatsId?: number | null
  }

  export type PageViewSourceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
  }

  export type PageViewSourceUncheckedUpdateManyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
    dailyStatsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LogsCreateInput = {
    createdAt?: Date | string
    message: string
    level: string
  }

  export type LogsUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    message: string
    level: string
  }

  export type LogsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type LogsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type LogsCreateManyInput = {
    id?: number
    createdAt?: Date | string
    message: string
    level: string
  }

  export type LogsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type LogsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type AuthCreateInput = {
    id?: string
    user?: UserCreateNestedOneWithoutAuthInput
    identities?: AuthIdentityCreateNestedManyWithoutAuthInput
    sessions?: SessionCreateNestedManyWithoutAuthInput
  }

  export type AuthUncheckedCreateInput = {
    id?: string
    userId?: number | null
    identities?: AuthIdentityUncheckedCreateNestedManyWithoutAuthInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAuthInput
  }

  export type AuthUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAuthNestedInput
    identities?: AuthIdentityUpdateManyWithoutAuthNestedInput
    sessions?: SessionUpdateManyWithoutAuthNestedInput
  }

  export type AuthUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    identities?: AuthIdentityUncheckedUpdateManyWithoutAuthNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAuthNestedInput
  }

  export type AuthCreateManyInput = {
    id?: string
    userId?: number | null
  }

  export type AuthUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AuthUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AuthIdentityCreateInput = {
    providerName: string
    providerUserId: string
    providerData?: string
    auth: AuthCreateNestedOneWithoutIdentitiesInput
  }

  export type AuthIdentityUncheckedCreateInput = {
    providerName: string
    providerUserId: string
    providerData?: string
    authId: string
  }

  export type AuthIdentityUpdateInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
    auth?: AuthUpdateOneRequiredWithoutIdentitiesNestedInput
  }

  export type AuthIdentityUncheckedUpdateInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type AuthIdentityCreateManyInput = {
    providerName: string
    providerUserId: string
    providerData?: string
    authId: string
  }

  export type AuthIdentityUpdateManyMutationInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
  }

  export type AuthIdentityUncheckedUpdateManyInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    auth: AuthCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth?: AuthUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type GptResponseListRelationFilter = {
    every?: GptResponseWhereInput
    some?: GptResponseWhereInput
    none?: GptResponseWhereInput
  }

  export type ContactFormMessageListRelationFilter = {
    every?: ContactFormMessageWhereInput
    some?: ContactFormMessageWhereInput
    none?: ContactFormMessageWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type AuthRelationFilter = {
    is?: AuthWhereInput | null
    isNot?: AuthWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GptResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactFormMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    lastActiveTimestamp?: SortOrder
    isAdmin?: SortOrder
    stripeId?: SortOrder
    checkoutSessionId?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    sendEmail?: SortOrder
    datePaid?: SortOrder
    credits?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    credits?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    lastActiveTimestamp?: SortOrder
    isAdmin?: SortOrder
    stripeId?: SortOrder
    checkoutSessionId?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    sendEmail?: SortOrder
    datePaid?: SortOrder
    credits?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    lastActiveTimestamp?: SortOrder
    isAdmin?: SortOrder
    stripeId?: SortOrder
    checkoutSessionId?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    sendEmail?: SortOrder
    datePaid?: SortOrder
    credits?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    credits?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type GptResponseCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GptResponseAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type GptResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GptResponseMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GptResponseSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    time?: SortOrder
    isDone?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    time?: SortOrder
    isDone?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    time?: SortOrder
    isDone?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    key?: SortOrder
    uploadUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    key?: SortOrder
    uploadUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    key?: SortOrder
    uploadUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ContactFormMessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    repliedAt?: SortOrder
  }

  export type ContactFormMessageAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ContactFormMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    repliedAt?: SortOrder
  }

  export type ContactFormMessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    repliedAt?: SortOrder
  }

  export type ContactFormMessageSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PageViewSourceListRelationFilter = {
    every?: PageViewSourceWhereInput
    some?: PageViewSourceWhereInput
    none?: PageViewSourceWhereInput
  }

  export type PageViewSourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyStatsCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    totalViews?: SortOrder
    prevDayViewsChangePercent?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
  }

  export type DailyStatsAvgOrderByAggregateInput = {
    id?: SortOrder
    totalViews?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
  }

  export type DailyStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    totalViews?: SortOrder
    prevDayViewsChangePercent?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
  }

  export type DailyStatsMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    totalViews?: SortOrder
    prevDayViewsChangePercent?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
  }

  export type DailyStatsSumOrderByAggregateInput = {
    id?: SortOrder
    totalViews?: SortOrder
    userCount?: SortOrder
    paidUserCount?: SortOrder
    userDelta?: SortOrder
    paidUserDelta?: SortOrder
    totalRevenue?: SortOrder
    totalProfit?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DailyStatsRelationFilter = {
    is?: DailyStatsWhereInput | null
    isNot?: DailyStatsWhereInput | null
  }

  export type PageViewSourceDateNameCompoundUniqueInput = {
    date: Date | string
    name: string
  }

  export type PageViewSourceCountOrderByAggregateInput = {
    date?: SortOrder
    name?: SortOrder
    visitors?: SortOrder
    dailyStatsId?: SortOrder
  }

  export type PageViewSourceAvgOrderByAggregateInput = {
    visitors?: SortOrder
    dailyStatsId?: SortOrder
  }

  export type PageViewSourceMaxOrderByAggregateInput = {
    date?: SortOrder
    name?: SortOrder
    visitors?: SortOrder
    dailyStatsId?: SortOrder
  }

  export type PageViewSourceMinOrderByAggregateInput = {
    date?: SortOrder
    name?: SortOrder
    visitors?: SortOrder
    dailyStatsId?: SortOrder
  }

  export type PageViewSourceSumOrderByAggregateInput = {
    visitors?: SortOrder
    dailyStatsId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type LogsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
    level?: SortOrder
  }

  export type LogsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LogsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
    level?: SortOrder
  }

  export type LogsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
    level?: SortOrder
  }

  export type LogsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthIdentityListRelationFilter = {
    every?: AuthIdentityWhereInput
    some?: AuthIdentityWhereInput
    none?: AuthIdentityWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AuthIdentityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AuthAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AuthMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AuthMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AuthSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AuthIdentityProviderNameProviderUserIdCompoundUniqueInput = {
    providerName: string
    providerUserId: string
  }

  export type AuthIdentityCountOrderByAggregateInput = {
    providerName?: SortOrder
    providerUserId?: SortOrder
    providerData?: SortOrder
    authId?: SortOrder
  }

  export type AuthIdentityMaxOrderByAggregateInput = {
    providerName?: SortOrder
    providerUserId?: SortOrder
    providerData?: SortOrder
    authId?: SortOrder
  }

  export type AuthIdentityMinOrderByAggregateInput = {
    providerName?: SortOrder
    providerUserId?: SortOrder
    providerData?: SortOrder
    authId?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
  }

  export type GptResponseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GptResponseCreateWithoutUserInput>, Enumerable<GptResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GptResponseCreateOrConnectWithoutUserInput>
    createMany?: GptResponseCreateManyUserInputEnvelope
    connect?: Enumerable<GptResponseWhereUniqueInput>
  }

  export type ContactFormMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ContactFormMessageCreateWithoutUserInput>, Enumerable<ContactFormMessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormMessageCreateOrConnectWithoutUserInput>
    createMany?: ContactFormMessageCreateManyUserInputEnvelope
    connect?: Enumerable<ContactFormMessageWhereUniqueInput>
  }

  export type TaskCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TaskCreateWithoutUserInput>, Enumerable<TaskUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>
    createMany?: TaskCreateManyUserInputEnvelope
    connect?: Enumerable<TaskWhereUniqueInput>
  }

  export type FileCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FileCreateWithoutUserInput>, Enumerable<FileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutUserInput>
    createMany?: FileCreateManyUserInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type AuthCreateNestedOneWithoutUserInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput
    connect?: AuthWhereUniqueInput
  }

  export type GptResponseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GptResponseCreateWithoutUserInput>, Enumerable<GptResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GptResponseCreateOrConnectWithoutUserInput>
    createMany?: GptResponseCreateManyUserInputEnvelope
    connect?: Enumerable<GptResponseWhereUniqueInput>
  }

  export type ContactFormMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ContactFormMessageCreateWithoutUserInput>, Enumerable<ContactFormMessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormMessageCreateOrConnectWithoutUserInput>
    createMany?: ContactFormMessageCreateManyUserInputEnvelope
    connect?: Enumerable<ContactFormMessageWhereUniqueInput>
  }

  export type TaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TaskCreateWithoutUserInput>, Enumerable<TaskUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>
    createMany?: TaskCreateManyUserInputEnvelope
    connect?: Enumerable<TaskWhereUniqueInput>
  }

  export type FileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FileCreateWithoutUserInput>, Enumerable<FileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutUserInput>
    createMany?: FileCreateManyUserInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type AuthUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput
    connect?: AuthWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GptResponseUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GptResponseCreateWithoutUserInput>, Enumerable<GptResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GptResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GptResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GptResponseCreateManyUserInputEnvelope
    set?: Enumerable<GptResponseWhereUniqueInput>
    disconnect?: Enumerable<GptResponseWhereUniqueInput>
    delete?: Enumerable<GptResponseWhereUniqueInput>
    connect?: Enumerable<GptResponseWhereUniqueInput>
    update?: Enumerable<GptResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GptResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GptResponseScalarWhereInput>
  }

  export type ContactFormMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ContactFormMessageCreateWithoutUserInput>, Enumerable<ContactFormMessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormMessageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ContactFormMessageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ContactFormMessageCreateManyUserInputEnvelope
    set?: Enumerable<ContactFormMessageWhereUniqueInput>
    disconnect?: Enumerable<ContactFormMessageWhereUniqueInput>
    delete?: Enumerable<ContactFormMessageWhereUniqueInput>
    connect?: Enumerable<ContactFormMessageWhereUniqueInput>
    update?: Enumerable<ContactFormMessageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ContactFormMessageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ContactFormMessageScalarWhereInput>
  }

  export type TaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TaskCreateWithoutUserInput>, Enumerable<TaskUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TaskCreateManyUserInputEnvelope
    set?: Enumerable<TaskWhereUniqueInput>
    disconnect?: Enumerable<TaskWhereUniqueInput>
    delete?: Enumerable<TaskWhereUniqueInput>
    connect?: Enumerable<TaskWhereUniqueInput>
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TaskScalarWhereInput>
  }

  export type FileUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FileCreateWithoutUserInput>, Enumerable<FileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FileCreateManyUserInputEnvelope
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    connect?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type AuthUpdateOneWithoutUserNestedInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput
    upsert?: AuthUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuthWhereUniqueInput
    update?: XOR<AuthUpdateWithoutUserInput, AuthUncheckedUpdateWithoutUserInput>
  }

  export type GptResponseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GptResponseCreateWithoutUserInput>, Enumerable<GptResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GptResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GptResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GptResponseCreateManyUserInputEnvelope
    set?: Enumerable<GptResponseWhereUniqueInput>
    disconnect?: Enumerable<GptResponseWhereUniqueInput>
    delete?: Enumerable<GptResponseWhereUniqueInput>
    connect?: Enumerable<GptResponseWhereUniqueInput>
    update?: Enumerable<GptResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GptResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GptResponseScalarWhereInput>
  }

  export type ContactFormMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ContactFormMessageCreateWithoutUserInput>, Enumerable<ContactFormMessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormMessageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ContactFormMessageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ContactFormMessageCreateManyUserInputEnvelope
    set?: Enumerable<ContactFormMessageWhereUniqueInput>
    disconnect?: Enumerable<ContactFormMessageWhereUniqueInput>
    delete?: Enumerable<ContactFormMessageWhereUniqueInput>
    connect?: Enumerable<ContactFormMessageWhereUniqueInput>
    update?: Enumerable<ContactFormMessageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ContactFormMessageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ContactFormMessageScalarWhereInput>
  }

  export type TaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TaskCreateWithoutUserInput>, Enumerable<TaskUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TaskCreateManyUserInputEnvelope
    set?: Enumerable<TaskWhereUniqueInput>
    disconnect?: Enumerable<TaskWhereUniqueInput>
    delete?: Enumerable<TaskWhereUniqueInput>
    connect?: Enumerable<TaskWhereUniqueInput>
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TaskScalarWhereInput>
  }

  export type FileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FileCreateWithoutUserInput>, Enumerable<FileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FileCreateManyUserInputEnvelope
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    connect?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type AuthUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput
    upsert?: AuthUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuthWhereUniqueInput
    update?: XOR<AuthUpdateWithoutUserInput, AuthUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutGptResponsesInput = {
    create?: XOR<UserCreateWithoutGptResponsesInput, UserUncheckedCreateWithoutGptResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGptResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutGptResponsesNestedInput = {
    create?: XOR<UserCreateWithoutGptResponsesInput, UserUncheckedCreateWithoutGptResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGptResponsesInput
    upsert?: UserUpsertWithoutGptResponsesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGptResponsesInput, UserUncheckedUpdateWithoutGptResponsesInput>
  }

  export type UserCreateNestedOneWithoutTasksInput = {
    create?: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput
    upsert?: UserUpsertWithoutTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTasksInput, UserUncheckedUpdateWithoutTasksInput>
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserCreateNestedOneWithoutContactFormMessagesInput = {
    create?: XOR<UserCreateWithoutContactFormMessagesInput, UserUncheckedCreateWithoutContactFormMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactFormMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContactFormMessagesNestedInput = {
    create?: XOR<UserCreateWithoutContactFormMessagesInput, UserUncheckedCreateWithoutContactFormMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactFormMessagesInput
    upsert?: UserUpsertWithoutContactFormMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutContactFormMessagesInput, UserUncheckedUpdateWithoutContactFormMessagesInput>
  }

  export type PageViewSourceCreateNestedManyWithoutDailyStatsInput = {
    create?: XOR<Enumerable<PageViewSourceCreateWithoutDailyStatsInput>, Enumerable<PageViewSourceUncheckedCreateWithoutDailyStatsInput>>
    connectOrCreate?: Enumerable<PageViewSourceCreateOrConnectWithoutDailyStatsInput>
    createMany?: PageViewSourceCreateManyDailyStatsInputEnvelope
    connect?: Enumerable<PageViewSourceWhereUniqueInput>
  }

  export type PageViewSourceUncheckedCreateNestedManyWithoutDailyStatsInput = {
    create?: XOR<Enumerable<PageViewSourceCreateWithoutDailyStatsInput>, Enumerable<PageViewSourceUncheckedCreateWithoutDailyStatsInput>>
    connectOrCreate?: Enumerable<PageViewSourceCreateOrConnectWithoutDailyStatsInput>
    createMany?: PageViewSourceCreateManyDailyStatsInputEnvelope
    connect?: Enumerable<PageViewSourceWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PageViewSourceUpdateManyWithoutDailyStatsNestedInput = {
    create?: XOR<Enumerable<PageViewSourceCreateWithoutDailyStatsInput>, Enumerable<PageViewSourceUncheckedCreateWithoutDailyStatsInput>>
    connectOrCreate?: Enumerable<PageViewSourceCreateOrConnectWithoutDailyStatsInput>
    upsert?: Enumerable<PageViewSourceUpsertWithWhereUniqueWithoutDailyStatsInput>
    createMany?: PageViewSourceCreateManyDailyStatsInputEnvelope
    set?: Enumerable<PageViewSourceWhereUniqueInput>
    disconnect?: Enumerable<PageViewSourceWhereUniqueInput>
    delete?: Enumerable<PageViewSourceWhereUniqueInput>
    connect?: Enumerable<PageViewSourceWhereUniqueInput>
    update?: Enumerable<PageViewSourceUpdateWithWhereUniqueWithoutDailyStatsInput>
    updateMany?: Enumerable<PageViewSourceUpdateManyWithWhereWithoutDailyStatsInput>
    deleteMany?: Enumerable<PageViewSourceScalarWhereInput>
  }

  export type PageViewSourceUncheckedUpdateManyWithoutDailyStatsNestedInput = {
    create?: XOR<Enumerable<PageViewSourceCreateWithoutDailyStatsInput>, Enumerable<PageViewSourceUncheckedCreateWithoutDailyStatsInput>>
    connectOrCreate?: Enumerable<PageViewSourceCreateOrConnectWithoutDailyStatsInput>
    upsert?: Enumerable<PageViewSourceUpsertWithWhereUniqueWithoutDailyStatsInput>
    createMany?: PageViewSourceCreateManyDailyStatsInputEnvelope
    set?: Enumerable<PageViewSourceWhereUniqueInput>
    disconnect?: Enumerable<PageViewSourceWhereUniqueInput>
    delete?: Enumerable<PageViewSourceWhereUniqueInput>
    connect?: Enumerable<PageViewSourceWhereUniqueInput>
    update?: Enumerable<PageViewSourceUpdateWithWhereUniqueWithoutDailyStatsInput>
    updateMany?: Enumerable<PageViewSourceUpdateManyWithWhereWithoutDailyStatsInput>
    deleteMany?: Enumerable<PageViewSourceScalarWhereInput>
  }

  export type DailyStatsCreateNestedOneWithoutSourcesInput = {
    create?: XOR<DailyStatsCreateWithoutSourcesInput, DailyStatsUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: DailyStatsCreateOrConnectWithoutSourcesInput
    connect?: DailyStatsWhereUniqueInput
  }

  export type DailyStatsUpdateOneWithoutSourcesNestedInput = {
    create?: XOR<DailyStatsCreateWithoutSourcesInput, DailyStatsUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: DailyStatsCreateOrConnectWithoutSourcesInput
    upsert?: DailyStatsUpsertWithoutSourcesInput
    disconnect?: boolean
    delete?: boolean
    connect?: DailyStatsWhereUniqueInput
    update?: XOR<DailyStatsUpdateWithoutSourcesInput, DailyStatsUncheckedUpdateWithoutSourcesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutAuthInput = {
    create?: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthInput
    connect?: UserWhereUniqueInput
  }

  export type AuthIdentityCreateNestedManyWithoutAuthInput = {
    create?: XOR<Enumerable<AuthIdentityCreateWithoutAuthInput>, Enumerable<AuthIdentityUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<AuthIdentityCreateOrConnectWithoutAuthInput>
    createMany?: AuthIdentityCreateManyAuthInputEnvelope
    connect?: Enumerable<AuthIdentityWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutAuthInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAuthInput>, Enumerable<SessionUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAuthInput>
    createMany?: SessionCreateManyAuthInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AuthIdentityUncheckedCreateNestedManyWithoutAuthInput = {
    create?: XOR<Enumerable<AuthIdentityCreateWithoutAuthInput>, Enumerable<AuthIdentityUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<AuthIdentityCreateOrConnectWithoutAuthInput>
    createMany?: AuthIdentityCreateManyAuthInputEnvelope
    connect?: Enumerable<AuthIdentityWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutAuthInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAuthInput>, Enumerable<SessionUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAuthInput>
    createMany?: SessionCreateManyAuthInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type UserUpdateOneWithoutAuthNestedInput = {
    create?: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthInput
    upsert?: UserUpsertWithoutAuthInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAuthInput, UserUncheckedUpdateWithoutAuthInput>
  }

  export type AuthIdentityUpdateManyWithoutAuthNestedInput = {
    create?: XOR<Enumerable<AuthIdentityCreateWithoutAuthInput>, Enumerable<AuthIdentityUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<AuthIdentityCreateOrConnectWithoutAuthInput>
    upsert?: Enumerable<AuthIdentityUpsertWithWhereUniqueWithoutAuthInput>
    createMany?: AuthIdentityCreateManyAuthInputEnvelope
    set?: Enumerable<AuthIdentityWhereUniqueInput>
    disconnect?: Enumerable<AuthIdentityWhereUniqueInput>
    delete?: Enumerable<AuthIdentityWhereUniqueInput>
    connect?: Enumerable<AuthIdentityWhereUniqueInput>
    update?: Enumerable<AuthIdentityUpdateWithWhereUniqueWithoutAuthInput>
    updateMany?: Enumerable<AuthIdentityUpdateManyWithWhereWithoutAuthInput>
    deleteMany?: Enumerable<AuthIdentityScalarWhereInput>
  }

  export type SessionUpdateManyWithoutAuthNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAuthInput>, Enumerable<SessionUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAuthInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutAuthInput>
    createMany?: SessionCreateManyAuthInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutAuthInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutAuthInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AuthIdentityUncheckedUpdateManyWithoutAuthNestedInput = {
    create?: XOR<Enumerable<AuthIdentityCreateWithoutAuthInput>, Enumerable<AuthIdentityUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<AuthIdentityCreateOrConnectWithoutAuthInput>
    upsert?: Enumerable<AuthIdentityUpsertWithWhereUniqueWithoutAuthInput>
    createMany?: AuthIdentityCreateManyAuthInputEnvelope
    set?: Enumerable<AuthIdentityWhereUniqueInput>
    disconnect?: Enumerable<AuthIdentityWhereUniqueInput>
    delete?: Enumerable<AuthIdentityWhereUniqueInput>
    connect?: Enumerable<AuthIdentityWhereUniqueInput>
    update?: Enumerable<AuthIdentityUpdateWithWhereUniqueWithoutAuthInput>
    updateMany?: Enumerable<AuthIdentityUpdateManyWithWhereWithoutAuthInput>
    deleteMany?: Enumerable<AuthIdentityScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutAuthNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAuthInput>, Enumerable<SessionUncheckedCreateWithoutAuthInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAuthInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutAuthInput>
    createMany?: SessionCreateManyAuthInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutAuthInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutAuthInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AuthCreateNestedOneWithoutIdentitiesInput = {
    create?: XOR<AuthCreateWithoutIdentitiesInput, AuthUncheckedCreateWithoutIdentitiesInput>
    connectOrCreate?: AuthCreateOrConnectWithoutIdentitiesInput
    connect?: AuthWhereUniqueInput
  }

  export type AuthUpdateOneRequiredWithoutIdentitiesNestedInput = {
    create?: XOR<AuthCreateWithoutIdentitiesInput, AuthUncheckedCreateWithoutIdentitiesInput>
    connectOrCreate?: AuthCreateOrConnectWithoutIdentitiesInput
    upsert?: AuthUpsertWithoutIdentitiesInput
    connect?: AuthWhereUniqueInput
    update?: XOR<AuthUpdateWithoutIdentitiesInput, AuthUncheckedUpdateWithoutIdentitiesInput>
  }

  export type AuthCreateNestedOneWithoutSessionsInput = {
    create?: XOR<AuthCreateWithoutSessionsInput, AuthUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: AuthCreateOrConnectWithoutSessionsInput
    connect?: AuthWhereUniqueInput
  }

  export type AuthUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<AuthCreateWithoutSessionsInput, AuthUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: AuthCreateOrConnectWithoutSessionsInput
    upsert?: AuthUpsertWithoutSessionsInput
    connect?: AuthWhereUniqueInput
    update?: XOR<AuthUpdateWithoutSessionsInput, AuthUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type GptResponseCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GptResponseUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GptResponseCreateOrConnectWithoutUserInput = {
    where: GptResponseWhereUniqueInput
    create: XOR<GptResponseCreateWithoutUserInput, GptResponseUncheckedCreateWithoutUserInput>
  }

  export type GptResponseCreateManyUserInputEnvelope = {
    data: Enumerable<GptResponseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ContactFormMessageCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    repliedAt?: Date | string | null
  }

  export type ContactFormMessageUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    repliedAt?: Date | string | null
  }

  export type ContactFormMessageCreateOrConnectWithoutUserInput = {
    where: ContactFormMessageWhereUniqueInput
    create: XOR<ContactFormMessageCreateWithoutUserInput, ContactFormMessageUncheckedCreateWithoutUserInput>
  }

  export type ContactFormMessageCreateManyUserInputEnvelope = {
    data: Enumerable<ContactFormMessageCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutUserInput = {
    id?: string
    description: string
    time?: string
    isDone?: boolean
    createdAt?: Date | string
  }

  export type TaskUncheckedCreateWithoutUserInput = {
    id?: string
    description: string
    time?: string
    isDone?: boolean
    createdAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutUserInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput>
  }

  export type TaskCreateManyUserInputEnvelope = {
    data: Enumerable<TaskCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutUserInput = {
    id?: string
    name: string
    type: string
    key: string
    uploadUrl: string
    createdAt?: Date | string
  }

  export type FileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    type: string
    key: string
    uploadUrl: string
    createdAt?: Date | string
  }

  export type FileCreateOrConnectWithoutUserInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileCreateManyUserInputEnvelope = {
    data: Enumerable<FileCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AuthCreateWithoutUserInput = {
    id?: string
    identities?: AuthIdentityCreateNestedManyWithoutAuthInput
    sessions?: SessionCreateNestedManyWithoutAuthInput
  }

  export type AuthUncheckedCreateWithoutUserInput = {
    id?: string
    identities?: AuthIdentityUncheckedCreateNestedManyWithoutAuthInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAuthInput
  }

  export type AuthCreateOrConnectWithoutUserInput = {
    where: AuthWhereUniqueInput
    create: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
  }

  export type GptResponseUpsertWithWhereUniqueWithoutUserInput = {
    where: GptResponseWhereUniqueInput
    update: XOR<GptResponseUpdateWithoutUserInput, GptResponseUncheckedUpdateWithoutUserInput>
    create: XOR<GptResponseCreateWithoutUserInput, GptResponseUncheckedCreateWithoutUserInput>
  }

  export type GptResponseUpdateWithWhereUniqueWithoutUserInput = {
    where: GptResponseWhereUniqueInput
    data: XOR<GptResponseUpdateWithoutUserInput, GptResponseUncheckedUpdateWithoutUserInput>
  }

  export type GptResponseUpdateManyWithWhereWithoutUserInput = {
    where: GptResponseScalarWhereInput
    data: XOR<GptResponseUpdateManyMutationInput, GptResponseUncheckedUpdateManyWithoutGptResponsesInput>
  }

  export type GptResponseScalarWhereInput = {
    AND?: Enumerable<GptResponseScalarWhereInput>
    OR?: Enumerable<GptResponseScalarWhereInput>
    NOT?: Enumerable<GptResponseScalarWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ContactFormMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: ContactFormMessageWhereUniqueInput
    update: XOR<ContactFormMessageUpdateWithoutUserInput, ContactFormMessageUncheckedUpdateWithoutUserInput>
    create: XOR<ContactFormMessageCreateWithoutUserInput, ContactFormMessageUncheckedCreateWithoutUserInput>
  }

  export type ContactFormMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: ContactFormMessageWhereUniqueInput
    data: XOR<ContactFormMessageUpdateWithoutUserInput, ContactFormMessageUncheckedUpdateWithoutUserInput>
  }

  export type ContactFormMessageUpdateManyWithWhereWithoutUserInput = {
    where: ContactFormMessageScalarWhereInput
    data: XOR<ContactFormMessageUpdateManyMutationInput, ContactFormMessageUncheckedUpdateManyWithoutContactFormMessagesInput>
  }

  export type ContactFormMessageScalarWhereInput = {
    AND?: Enumerable<ContactFormMessageScalarWhereInput>
    OR?: Enumerable<ContactFormMessageScalarWhereInput>
    NOT?: Enumerable<ContactFormMessageScalarWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    isRead?: BoolFilter | boolean
    repliedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>
    create: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>
  }

  export type TaskUpdateManyWithWhereWithoutUserInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutTasksInput>
  }

  export type TaskScalarWhereInput = {
    AND?: Enumerable<TaskScalarWhereInput>
    OR?: Enumerable<TaskScalarWhereInput>
    NOT?: Enumerable<TaskScalarWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    time?: StringFilter | string
    isDone?: BoolFilter | boolean
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type FileUpsertWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithWhereWithoutUserInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutFilesInput>
  }

  export type FileScalarWhereInput = {
    AND?: Enumerable<FileScalarWhereInput>
    OR?: Enumerable<FileScalarWhereInput>
    NOT?: Enumerable<FileScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    type?: StringFilter | string
    key?: StringFilter | string
    uploadUrl?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type AuthUpsertWithoutUserInput = {
    update: XOR<AuthUpdateWithoutUserInput, AuthUncheckedUpdateWithoutUserInput>
    create: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
  }

  export type AuthUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identities?: AuthIdentityUpdateManyWithoutAuthNestedInput
    sessions?: SessionUpdateManyWithoutAuthNestedInput
  }

  export type AuthUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identities?: AuthIdentityUncheckedUpdateManyWithoutAuthNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAuthNestedInput
  }

  export type UserCreateWithoutGptResponsesInput = {
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    contactFormMessages?: ContactFormMessageCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    auth?: AuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGptResponsesInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    contactFormMessages?: ContactFormMessageUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    auth?: AuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGptResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGptResponsesInput, UserUncheckedCreateWithoutGptResponsesInput>
  }

  export type UserUpsertWithoutGptResponsesInput = {
    update: XOR<UserUpdateWithoutGptResponsesInput, UserUncheckedUpdateWithoutGptResponsesInput>
    create: XOR<UserCreateWithoutGptResponsesInput, UserUncheckedCreateWithoutGptResponsesInput>
  }

  export type UserUpdateWithoutGptResponsesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    contactFormMessages?: ContactFormMessageUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    auth?: AuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGptResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    contactFormMessages?: ContactFormMessageUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    auth?: AuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutTasksInput = {
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    auth?: AuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTasksInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseUncheckedCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    auth?: AuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
  }

  export type UserUpsertWithoutTasksInput = {
    update: XOR<UserUpdateWithoutTasksInput, UserUncheckedUpdateWithoutTasksInput>
    create: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
  }

  export type UserUpdateWithoutTasksInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    auth?: AuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUncheckedUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    auth?: AuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutFilesInput = {
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    auth?: AuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseUncheckedCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    auth?: AuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    auth?: AuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUncheckedUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    auth?: AuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutContactFormMessagesInput = {
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    auth?: AuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContactFormMessagesInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    auth?: AuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContactFormMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactFormMessagesInput, UserUncheckedCreateWithoutContactFormMessagesInput>
  }

  export type UserUpsertWithoutContactFormMessagesInput = {
    update: XOR<UserUpdateWithoutContactFormMessagesInput, UserUncheckedUpdateWithoutContactFormMessagesInput>
    create: XOR<UserCreateWithoutContactFormMessagesInput, UserUncheckedCreateWithoutContactFormMessagesInput>
  }

  export type UserUpdateWithoutContactFormMessagesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    auth?: AuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactFormMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    auth?: AuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PageViewSourceCreateWithoutDailyStatsInput = {
    date?: Date | string
    name: string
    visitors: number
  }

  export type PageViewSourceUncheckedCreateWithoutDailyStatsInput = {
    date?: Date | string
    name: string
    visitors: number
  }

  export type PageViewSourceCreateOrConnectWithoutDailyStatsInput = {
    where: PageViewSourceWhereUniqueInput
    create: XOR<PageViewSourceCreateWithoutDailyStatsInput, PageViewSourceUncheckedCreateWithoutDailyStatsInput>
  }

  export type PageViewSourceCreateManyDailyStatsInputEnvelope = {
    data: Enumerable<PageViewSourceCreateManyDailyStatsInput>
    skipDuplicates?: boolean
  }

  export type PageViewSourceUpsertWithWhereUniqueWithoutDailyStatsInput = {
    where: PageViewSourceWhereUniqueInput
    update: XOR<PageViewSourceUpdateWithoutDailyStatsInput, PageViewSourceUncheckedUpdateWithoutDailyStatsInput>
    create: XOR<PageViewSourceCreateWithoutDailyStatsInput, PageViewSourceUncheckedCreateWithoutDailyStatsInput>
  }

  export type PageViewSourceUpdateWithWhereUniqueWithoutDailyStatsInput = {
    where: PageViewSourceWhereUniqueInput
    data: XOR<PageViewSourceUpdateWithoutDailyStatsInput, PageViewSourceUncheckedUpdateWithoutDailyStatsInput>
  }

  export type PageViewSourceUpdateManyWithWhereWithoutDailyStatsInput = {
    where: PageViewSourceScalarWhereInput
    data: XOR<PageViewSourceUpdateManyMutationInput, PageViewSourceUncheckedUpdateManyWithoutSourcesInput>
  }

  export type PageViewSourceScalarWhereInput = {
    AND?: Enumerable<PageViewSourceScalarWhereInput>
    OR?: Enumerable<PageViewSourceScalarWhereInput>
    NOT?: Enumerable<PageViewSourceScalarWhereInput>
    date?: DateTimeFilter | Date | string
    name?: StringFilter | string
    visitors?: IntFilter | number
    dailyStatsId?: IntNullableFilter | number | null
  }

  export type DailyStatsCreateWithoutSourcesInput = {
    date?: Date | string
    totalViews?: number
    prevDayViewsChangePercent?: string
    userCount?: number
    paidUserCount?: number
    userDelta?: number
    paidUserDelta?: number
    totalRevenue?: number
    totalProfit?: number
  }

  export type DailyStatsUncheckedCreateWithoutSourcesInput = {
    id?: number
    date?: Date | string
    totalViews?: number
    prevDayViewsChangePercent?: string
    userCount?: number
    paidUserCount?: number
    userDelta?: number
    paidUserDelta?: number
    totalRevenue?: number
    totalProfit?: number
  }

  export type DailyStatsCreateOrConnectWithoutSourcesInput = {
    where: DailyStatsWhereUniqueInput
    create: XOR<DailyStatsCreateWithoutSourcesInput, DailyStatsUncheckedCreateWithoutSourcesInput>
  }

  export type DailyStatsUpsertWithoutSourcesInput = {
    update: XOR<DailyStatsUpdateWithoutSourcesInput, DailyStatsUncheckedUpdateWithoutSourcesInput>
    create: XOR<DailyStatsCreateWithoutSourcesInput, DailyStatsUncheckedCreateWithoutSourcesInput>
  }

  export type DailyStatsUpdateWithoutSourcesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalViews?: IntFieldUpdateOperationsInput | number
    prevDayViewsChangePercent?: StringFieldUpdateOperationsInput | string
    userCount?: IntFieldUpdateOperationsInput | number
    paidUserCount?: IntFieldUpdateOperationsInput | number
    userDelta?: IntFieldUpdateOperationsInput | number
    paidUserDelta?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    totalProfit?: FloatFieldUpdateOperationsInput | number
  }

  export type DailyStatsUncheckedUpdateWithoutSourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalViews?: IntFieldUpdateOperationsInput | number
    prevDayViewsChangePercent?: StringFieldUpdateOperationsInput | string
    userCount?: IntFieldUpdateOperationsInput | number
    paidUserCount?: IntFieldUpdateOperationsInput | number
    userDelta?: IntFieldUpdateOperationsInput | number
    paidUserDelta?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    totalProfit?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutAuthInput = {
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuthInput = {
    id?: number
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    lastActiveTimestamp?: Date | string
    isAdmin?: boolean
    stripeId?: string | null
    checkoutSessionId?: string | null
    subscriptionTier?: string | null
    subscriptionStatus?: string | null
    sendEmail?: boolean
    datePaid?: Date | string | null
    credits?: number
    gptResponses?: GptResponseUncheckedCreateNestedManyWithoutUserInput
    contactFormMessages?: ContactFormMessageUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuthInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
  }

  export type AuthIdentityCreateWithoutAuthInput = {
    providerName: string
    providerUserId: string
    providerData?: string
  }

  export type AuthIdentityUncheckedCreateWithoutAuthInput = {
    providerName: string
    providerUserId: string
    providerData?: string
  }

  export type AuthIdentityCreateOrConnectWithoutAuthInput = {
    where: AuthIdentityWhereUniqueInput
    create: XOR<AuthIdentityCreateWithoutAuthInput, AuthIdentityUncheckedCreateWithoutAuthInput>
  }

  export type AuthIdentityCreateManyAuthInputEnvelope = {
    data: Enumerable<AuthIdentityCreateManyAuthInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutAuthInput = {
    id: string
    expiresAt: Date | string
  }

  export type SessionUncheckedCreateWithoutAuthInput = {
    id: string
    expiresAt: Date | string
  }

  export type SessionCreateOrConnectWithoutAuthInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutAuthInput, SessionUncheckedCreateWithoutAuthInput>
  }

  export type SessionCreateManyAuthInputEnvelope = {
    data: Enumerable<SessionCreateManyAuthInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAuthInput = {
    update: XOR<UserUpdateWithoutAuthInput, UserUncheckedUpdateWithoutAuthInput>
    create: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
  }

  export type UserUpdateWithoutAuthInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    datePaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credits?: IntFieldUpdateOperationsInput | number
    gptResponses?: GptResponseUncheckedUpdateManyWithoutUserNestedInput
    contactFormMessages?: ContactFormMessageUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuthIdentityUpsertWithWhereUniqueWithoutAuthInput = {
    where: AuthIdentityWhereUniqueInput
    update: XOR<AuthIdentityUpdateWithoutAuthInput, AuthIdentityUncheckedUpdateWithoutAuthInput>
    create: XOR<AuthIdentityCreateWithoutAuthInput, AuthIdentityUncheckedCreateWithoutAuthInput>
  }

  export type AuthIdentityUpdateWithWhereUniqueWithoutAuthInput = {
    where: AuthIdentityWhereUniqueInput
    data: XOR<AuthIdentityUpdateWithoutAuthInput, AuthIdentityUncheckedUpdateWithoutAuthInput>
  }

  export type AuthIdentityUpdateManyWithWhereWithoutAuthInput = {
    where: AuthIdentityScalarWhereInput
    data: XOR<AuthIdentityUpdateManyMutationInput, AuthIdentityUncheckedUpdateManyWithoutIdentitiesInput>
  }

  export type AuthIdentityScalarWhereInput = {
    AND?: Enumerable<AuthIdentityScalarWhereInput>
    OR?: Enumerable<AuthIdentityScalarWhereInput>
    NOT?: Enumerable<AuthIdentityScalarWhereInput>
    providerName?: StringFilter | string
    providerUserId?: StringFilter | string
    providerData?: StringFilter | string
    authId?: StringFilter | string
  }

  export type SessionUpsertWithWhereUniqueWithoutAuthInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutAuthInput, SessionUncheckedUpdateWithoutAuthInput>
    create: XOR<SessionCreateWithoutAuthInput, SessionUncheckedCreateWithoutAuthInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutAuthInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutAuthInput, SessionUncheckedUpdateWithoutAuthInput>
  }

  export type SessionUpdateManyWithWhereWithoutAuthInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type AuthCreateWithoutIdentitiesInput = {
    id?: string
    user?: UserCreateNestedOneWithoutAuthInput
    sessions?: SessionCreateNestedManyWithoutAuthInput
  }

  export type AuthUncheckedCreateWithoutIdentitiesInput = {
    id?: string
    userId?: number | null
    sessions?: SessionUncheckedCreateNestedManyWithoutAuthInput
  }

  export type AuthCreateOrConnectWithoutIdentitiesInput = {
    where: AuthWhereUniqueInput
    create: XOR<AuthCreateWithoutIdentitiesInput, AuthUncheckedCreateWithoutIdentitiesInput>
  }

  export type AuthUpsertWithoutIdentitiesInput = {
    update: XOR<AuthUpdateWithoutIdentitiesInput, AuthUncheckedUpdateWithoutIdentitiesInput>
    create: XOR<AuthCreateWithoutIdentitiesInput, AuthUncheckedCreateWithoutIdentitiesInput>
  }

  export type AuthUpdateWithoutIdentitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAuthNestedInput
    sessions?: SessionUpdateManyWithoutAuthNestedInput
  }

  export type AuthUncheckedUpdateWithoutIdentitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessions?: SessionUncheckedUpdateManyWithoutAuthNestedInput
  }

  export type AuthCreateWithoutSessionsInput = {
    id?: string
    user?: UserCreateNestedOneWithoutAuthInput
    identities?: AuthIdentityCreateNestedManyWithoutAuthInput
  }

  export type AuthUncheckedCreateWithoutSessionsInput = {
    id?: string
    userId?: number | null
    identities?: AuthIdentityUncheckedCreateNestedManyWithoutAuthInput
  }

  export type AuthCreateOrConnectWithoutSessionsInput = {
    where: AuthWhereUniqueInput
    create: XOR<AuthCreateWithoutSessionsInput, AuthUncheckedCreateWithoutSessionsInput>
  }

  export type AuthUpsertWithoutSessionsInput = {
    update: XOR<AuthUpdateWithoutSessionsInput, AuthUncheckedUpdateWithoutSessionsInput>
    create: XOR<AuthCreateWithoutSessionsInput, AuthUncheckedCreateWithoutSessionsInput>
  }

  export type AuthUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAuthNestedInput
    identities?: AuthIdentityUpdateManyWithoutAuthNestedInput
  }

  export type AuthUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    identities?: AuthIdentityUncheckedUpdateManyWithoutAuthNestedInput
  }

  export type GptResponseCreateManyUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactFormMessageCreateManyUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    repliedAt?: Date | string | null
  }

  export type TaskCreateManyUserInput = {
    id?: string
    description: string
    time?: string
    isDone?: boolean
    createdAt?: Date | string
  }

  export type FileCreateManyUserInput = {
    id?: string
    name: string
    type: string
    key: string
    uploadUrl: string
    createdAt?: Date | string
  }

  export type GptResponseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GptResponseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GptResponseUncheckedUpdateManyWithoutGptResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContactFormMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContactFormMessageUncheckedUpdateManyWithoutContactFormMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    repliedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaskUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    uploadUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewSourceCreateManyDailyStatsInput = {
    date?: Date | string
    name: string
    visitors: number
  }

  export type PageViewSourceUpdateWithoutDailyStatsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
  }

  export type PageViewSourceUncheckedUpdateWithoutDailyStatsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
  }

  export type PageViewSourceUncheckedUpdateManyWithoutSourcesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    visitors?: IntFieldUpdateOperationsInput | number
  }

  export type AuthIdentityCreateManyAuthInput = {
    providerName: string
    providerUserId: string
    providerData?: string
  }

  export type SessionCreateManyAuthInput = {
    id: string
    expiresAt: Date | string
  }

  export type AuthIdentityUpdateWithoutAuthInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
  }

  export type AuthIdentityUncheckedUpdateWithoutAuthInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
  }

  export type AuthIdentityUncheckedUpdateManyWithoutIdentitiesInput = {
    providerName?: StringFieldUpdateOperationsInput | string
    providerUserId?: StringFieldUpdateOperationsInput | string
    providerData?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUpdateWithoutAuthInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutAuthInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}