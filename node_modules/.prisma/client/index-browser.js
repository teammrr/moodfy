
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  createdAt: 'createdAt',
  lastActiveTimestamp: 'lastActiveTimestamp',
  isAdmin: 'isAdmin',
  stripeId: 'stripeId',
  checkoutSessionId: 'checkoutSessionId',
  subscriptionTier: 'subscriptionTier',
  subscriptionStatus: 'subscriptionStatus',
  sendEmail: 'sendEmail',
  datePaid: 'datePaid',
  credits: 'credits'
};

exports.Prisma.GptResponseScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  description: 'description',
  time: 'time',
  isDone: 'isDone',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  key: 'key',
  uploadUrl: 'uploadUrl',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ContactFormMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  createdAt: 'createdAt',
  isRead: 'isRead',
  repliedAt: 'repliedAt'
};

exports.Prisma.DailyStatsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  totalViews: 'totalViews',
  prevDayViewsChangePercent: 'prevDayViewsChangePercent',
  userCount: 'userCount',
  paidUserCount: 'paidUserCount',
  userDelta: 'userDelta',
  paidUserDelta: 'paidUserDelta',
  totalRevenue: 'totalRevenue',
  totalProfit: 'totalProfit'
};

exports.Prisma.PageViewSourceScalarFieldEnum = {
  date: 'date',
  name: 'name',
  visitors: 'visitors',
  dailyStatsId: 'dailyStatsId'
};

exports.Prisma.LogsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  message: 'message',
  level: 'level'
};

exports.Prisma.AuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.AuthIdentityScalarFieldEnum = {
  providerName: 'providerName',
  providerUserId: 'providerUserId',
  providerData: 'providerData',
  authId: 'authId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  GptResponse: 'GptResponse',
  Task: 'Task',
  File: 'File',
  ContactFormMessage: 'ContactFormMessage',
  DailyStats: 'DailyStats',
  PageViewSource: 'PageViewSource',
  Logs: 'Logs',
  Auth: 'Auth',
  AuthIdentity: 'AuthIdentity',
  Session: 'Session'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
